{"version":3,"file":"tf-backend-webgl.min.js","sources":["../src/canvas_util.ts","../src/tex_util.ts","../src/webgl_util.ts","../src/flags_webgl.ts","../src/addn_gpu.ts","../src/addn_packed_gpu.ts","../src/argminmax_gpu.ts","../src/packing_util.ts","../src/glsl_version.ts","../src/shader_compiler_util.ts","../src/shader_compiler.ts","../src/argminmax_packed_gpu.ts","../src/avg_pool_backprop_gpu.ts","../src/batchnorm_gpu.ts","../src/batchnorm_packed_gpu.ts","../src/binaryop_complex_gpu.ts","../src/binaryop_gpu.ts","../src/binaryop_packed_gpu.ts","../src/clip_gpu.ts","../src/clip_packed_gpu.ts","../src/complex_abs_gpu.ts","../src/concat_gpu.ts","../src/concat_packed_gpu.ts","../src/conv_backprop_gpu.ts","../src/conv_backprop_gpu_depthwise.ts","../src/conv_gpu.ts","../src/conv_gpu_depthwise.ts","../src/conv_packed_gpu_depthwise.ts","../src/crop_and_resize_gpu.ts","../src/cumsum_gpu.ts","../src/decode_matrix_gpu.ts","../src/decode_matrix_packed_gpu.ts","../src/depth_to_space_gpu.ts","../src/diag_gpu.ts","../src/encode_float_gpu.ts","../src/encode_float_packed_gpu.ts","../src/encode_matrix_gpu.ts","../src/encode_matrix_packed_gpu.ts","../src/fft_gpu.ts","../src/fill_gpu.ts","../src/gather_gpu.ts","../src/gather_nd_gpu.ts","../src/gpgpu_util.ts","../src/gpgpu_context.ts","../src/gpgpu_math.ts","../src/im2col_packed_gpu.ts","../src/lrn_gpu.ts","../src/lrn_grad_gpu.ts","../src/lrn_packed_gpu.ts","../src/max_pool_backprop_gpu.ts","../src/mulmat_packed_gpu.ts","../src/multinomial_gpu.ts","../src/onehot_gpu.ts","../src/pack_gpu.ts","../src/pad_gpu.ts","../src/pad_packed_gpu.ts","../src/pool_gpu.ts","../src/reduce_gpu.ts","../src/reshape_packed_gpu.ts","../src/resize_bilinear_backprop_gpu.ts","../src/resize_bilinear_gpu.ts","../src/resize_bilinear_packed_gpu.ts","../src/resize_nearest_neighbor_backprop_gpu.ts","../src/resize_nearest_neighbor_gpu.ts","../src/reverse_gpu.ts","../src/reverse_packed_gpu.ts","../src/scatter_gpu.ts","../src/segment_gpu.ts","../src/select_gpu.ts","../src/slice_gpu.ts","../src/slice_packed_gpu.ts","../src/strided_slice_gpu.ts","../src/texture_manager.ts","../src/tile_gpu.ts","../src/unaryop_gpu.ts","../src/unaryop_packed_gpu.ts","../src/unpack_gpu.ts","../src/backend_webgl.ts","../src/kernels/Div.ts","../src/kernels/FromPixels.ts","../src/kernels/Div_impl.ts","../src/kernels/FromPixels_utils/from_pixels_gpu.ts","../src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../node_modules/@tensorflow/tfjs-backend-cpu/dist/backend_cpu.js","../src/kernel_utils/shared.ts","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js","../src/kernel_utils/reshape.ts","../src/kernels/Max_impl.ts","../src/kernel_utils/reduce.ts","../src/transpose_gpu.ts","../src/transpose_packed_gpu.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Max.ts","../src/register_all_kernels.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/kernels/Square.ts","../src/kernels/SquaredDifference.ts","../src/kernels/Transpose.ts","../src/webgl.ts","../src/index.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(webGLVersion: number): WebGLRenderingContext {\n  if (!(webGLVersion in contexts)) {\n    contexts[webGLVersion] = getWebGLRenderingContext(webGLVersion);\n  }\n  const gl = contexts[webGLVersion];\n  if (gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(webGLVersion: number): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas = createCanvas(webGLVersion);\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)) as\n        WebGLRenderingContext;\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {backend_util, DataId, DataType, Tensor, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: WebGLTexture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensors?: {real: Tensor, imag: Tensor};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n  }\n  downloadTextureFormat = gl.RGBA;\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(\n    gl: WebGLRenderingContext, debugMode: boolean, func: () => T): T {\n  const returnValue = func();\n  if (debugMode) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, debug: boolean, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, debug, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, debug: boolean,\n    vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, debug, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(\n      gl, debug, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, debug, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, debug: boolean,\n    fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, debug, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(\n      gl, debug, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, debug, () => gl.compileShader(fragmentShader));\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(\n    gl: WebGLRenderingContext, debug: boolean): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, debug, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram) {\n  callAndCheck(gl, debug, () => gl.linkProgram(program));\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\nexport function validateProgram(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram) {\n  callAndCheck(gl, debug, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, debug: boolean,\n    data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, debug, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, debug, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, debug, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, debug: boolean, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, debug, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, debug, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, debug,\n      () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(\n    gl: WebGLRenderingContext, debug: boolean): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, debug, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(\n    gl: WebGLRenderingContext, debug: boolean): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, debug, () => gl.createFramebuffer(),\n      'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram,\n    attribute: string, buffer: WebGLBuffer, arrayEntriesPerItem: number,\n    itemStrideInBytes: number, itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, debug, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, debug,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, debug, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, debug: boolean, texture: WebGLTexture,\n    textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, debug, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, debug: boolean, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, debug, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, debug, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram,\n    texture: WebGLTexture, uniformSamplerLocation: WebGLUniformLocation,\n    textureUnit: number) {\n  callAndCheck(\n      gl, debug, () => bindTextureUnit(gl, debug, texture, textureUnit));\n  callAndCheck(\n      gl, debug, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(\n    gl: WebGLRenderingContext, debug: boolean) {\n  callAndCheck(gl, debug, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(\n      gl, debug, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(\n      gl, debug, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, debug: boolean, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(\n      gl, debug, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl, debug,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, debug: boolean, framebuffer: WebGLFramebuffer) {\n  callAndCheck(\n      gl, debug, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl, debug,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, debug: boolean, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, debug, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    return [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    return logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    return [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  } else {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      return util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    }\n    return util.sizeToSquarishShape(size);\n  }\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\n// TODO: https://github.com/tensorflow/tfjs/issues/1679\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => false);\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const windowSize = reduceInfo.windowSize;\n    const batchSize = reduceInfo.batchSize;\n    const inSize = reduceInfo.inSize;\n    const outSize = Math.ceil(inSize / windowSize);\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly.\n    defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo, userCode: string,\n    usesPackedTextures: boolean): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n  });\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet =\n      inputsInfo\n          .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n          .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet =\n        getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet =\n        getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (usesPackedTextures) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo);\n    case 1:\n      return getSampler1D(inInfo);\n    case 2:\n      return getSampler2D(inInfo);\n    case 3:\n      return getSampler3D(inInfo);\n    case 4:\n      return getSampler4D(inInfo);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo);\n    case 2:\n      return getPackedSampler2D(inInfo);\n    case 3:\n      return getPackedSampler3D(inInfo);\n    default:\n      return getPackedSamplerND(inInfo);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo,\n    usesPackedTextures = false): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo);\n  } else {\n    res += getSamplerFromInInfo(inInfo);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutputPacked2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutput2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  if (texShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nconst CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const ADD = 'return a + b;';\nexport const SUB = 'return a - b;';\nexport const MUL = 'return a * b;';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nexport const DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nexport const INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nexport const POW = `\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const EQUAL = `return float(a == b);`;\n\nexport const NOT_EQUAL = `return float(a != b);`;\n\nexport const LESS = `return float(a < b);`;\n\nexport const LESS_EQUAL = `return float(a <= b);`;\n\nexport const GREATER = `return float(a > b);`;\n\nexport const GREATER_EQUAL = `return float(a >= b);`;\n\nexport const LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\n\nexport const LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\n\nexport const MAX = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\nexport const MIN = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\nexport const MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nexport const ATAN2 = CHECK_NAN_SNIPPET + `\n  return atan(a, b);\n`;\n\nexport const ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\n\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nconst CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nexport const DIV = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const INT_DIV = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const POW = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const PRELU = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const ATAN2 = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport const LESS = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const LESS_EQUAL = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const GREATER = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const GREATER_EQUAL = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const LOGICAL_AND = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const LOGICAL_OR = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const MAX = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const MIN = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const MOD = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n        } else {\n          const channels = getChannels('coords', rank);\n          checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `int xR; int xC; int xCOffset;`;\n\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `\n          vec4 xTexelR${r}C${c * 2} = vec4(0.);\n          vec4 wR${r}C${c} = vec4(0.);\n          vec4 xR${r}C${c} = vec4(0.);`;\n      }\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    for (let r = 0; r < filterHeight; r++) {\n      for (let texelC = 0; texelC < texelsAcross; texelC++) {\n        const c = texelC * 2;\n\n        mainLoop += `\n          xR = xRCorner + ${r * dilationHeight};\n          xC = xCCorner + ${c * dilationWidth};\n        `;\n\n        if (strideWidth === 1) {\n          if (c < filterWidth) {\n            // If padding is odd, the outer texels have to be composed.\n            if (padLeft % 2 === 1) {\n              // TODO: Ensure vec4 previous does not result in redundant sample,\n              // and avoid setting xTexelRC's that exceed the boundary in the\n              // first place rather than resetting them to vec4(0)).\n\n              // To compute xCOffset:\n              // - If padding is odd, we must add 1 to ensure we ask for an\n              // even-numbered row.\n              // - We subtract 2 to access the previous texel.\n\n              mainLoop += `\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${\n                  xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    xTexelR${r}C${c}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${\n                  xNumCols}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${r}C${c} = vec4(previous.zw, xTexelR${r}C${c}.xy);\n                } else {\n                  xR${r}C${c} = vec4(0, 0, xTexelR${r}C${c}.xy);\n                }\n              `;\n            } else {\n              // Padding is even, so xRC corresponds to a single texel.\n              mainLoop += `\n                if(xR >= 0 && xR < ${xNumRows} && xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xR${r}C${c} = xTexelR${r}C${c};\n              `;\n            }\n\n            if (c + 1 < filterWidth) {\n              // If dilation is even, the second entry should match the first\n              // (either both are composed or both are single samples). But if\n              // dilation is odd, then the second entry should be the opposite\n              // of the first (if the first is composed, the second is a single\n              // sample, and vice versa.)\n\n              const nextTexelOffset = padLeft % 2 === 0 ?\n                  util.nearestLargerEven(dilationWidth) :\n                  dilationWidth;\n\n              if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                  (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `;\n\n                // If dilation > 1 then the xRC's will not be able to share any\n                // values, so each xRC will require two unique calls to getX.\n                if (dilationWidth > 1) {\n                  mainLoop += `\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${xNumRows} &&\n                      xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                      xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${r}C${c} = vec4(0.);\n                    }\n                  `;\n                }\n\n                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.xy);\n                `;\n              } else {\n                mainLoop += `\n                  xCOffset = xC + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${r}C${c + 1} = xTexelR${r}C${c + 2};\n                `;\n              }\n            }\n          }\n        } else {  // stride > 1\n          if (c < filterWidth) {\n            mainLoop += `\n              if(xR >= 0 && xR < ${xNumRows}) {\n            `;\n\n            // Depending on whether padLeft is even or odd, we want either the\n            // xy or zw channels from X texels for xR${r}C${c}. If padLeft is\n            // even, xR${r}C${c + 1} is simply the zw channels of texels we've\n            // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will\n            // need to come from the xy channels of a new texel, hence the `vec4\n            // final` initialized below.\n            if (padLeft % 2 === 1) {\n              mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${r}C${c + 1} = vec4(xTexelR${r}C${c + 2}.xy, final.xy);\n                `;\n              }\n            } else {\n              mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.xy, xTexelR${r}C${c + 2}.xy);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n                `;\n              }\n            }\n\n            mainLoop += `}`;\n          }\n        }\n\n        if (c < filterWidth) {\n          mainLoop += `\n            vec4 wTexelR${r}C${c} = getW(${r}, ${c}, d1, q);\n            wR${r}C${c} = vec4(wTexelR${r}C${c}.xz, wTexelR${r}C${c}.xz);\n          `;\n\n          if (c + 1 < filterWidth) {\n            mainLoop += `\n              vec4 wTexelR${r}C${c + 1} = getW(${r}, ${c + 1}, d1, q);\n              wR${r}C${c + 1} =\n                vec4(wTexelR${r}C${c + 1}.xz, wTexelR${r}C${c + 1}.xz);`;\n          }\n        }\n      }\n    }\n\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `dotProd += xR${r}C${c} * wR${r}C${c};`;\n      }\n    }\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${mainLoop}\n\n        vec4 result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class CumSumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(shape: number[], exclusive: boolean, reverse: boolean) {\n    this.outputShape = shape;\n    const rank = shape.length;\n    const finalDim = shape[shape.length - 1];\n    const comparator = reverse ? '<' : '>';\n\n    this.userCode = `\n      int getIndex(int i) {\n        ${reverse ? `return ${finalDim} -i - 1;` : 'return i;'}\n      }\n\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = 0.0;\n        for (int i = ${finalDim} - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx ${comparator} end) {\n            continue;\n          }\n          if (idx == end && ${exclusive}) {\n            continue;\n          }\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / ${width};\n        int c = imod(flatIndex, ${width});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\n              localCoords[1] += ${row};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${width};\n              c = imod(flatIndex, ${width});\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n              values = ${glsl.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${channel}] = values[0];\n              } else if(offset == 1) {\n                result[${channel}] = values[1];\n              } else if(offset == 2) {\n                result[${channel}] = values[2];\n              } else {\n                result[${channel}] = values[3];\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${mainLoop}\n\n        ${glsl.output} = ${output};\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const COMPLEX_FFT = {\n  REAL: 'return real * expR - imag * expI;',\n  IMAG: 'return real * expI + imag * expR;'\n};\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, inputShape: [number, number], inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${op}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  valueLoc: WebGLUniformLocation;\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(value: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.valueLoc == null) {\n        this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n      }\n      gpgpu.gl.uniform1f(this.valueLoc, value);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], indicesLength: number, axis: number) {\n    const outputShape: number[] = aShape.slice();\n    outputShape[axis] = indicesLength;\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, axis);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[], axis: number): string {\n  const rank = aShape.length;\n  if (rank > 4) {\n    throw Error(`Gather for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `int(getIndices(resRC))`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === axis) {\n      sourceCoords.push(`int(getIndices(${currentCoords[i]}))`);\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[]) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, debug: boolean): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, debug, vertexShaderSource);\n}\n\nexport function createVertexBuffer(\n    gl: WebGLRenderingContext, debug: boolean): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, debug, vertexArray);\n}\n\nexport function createIndexBuffer(\n    gl: WebGLRenderingContext, debug: boolean): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, debug, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, debug: boolean, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): WebGLTexture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl, debug);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, debug, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texImage2D(\n          tex2d, 0, internalFormat, width, height, 0, textureFormat,\n          textureType, null));\n  webgl_util.callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return texture;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, textureConfig.internalFormatFloat,\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, textureConfig.internalFormatHalfFloat,\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, textureConfig.internalFormatPackedFloat,\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, textureConfig.internalFormatPackedHalfFloat,\n      gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, debug, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, debug, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, debug, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, debug: boolean, texture: WebGLTexture,\n    width: number, height: number, data: TypedArray,\n    textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(\n      gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texImage2D(\n          gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n          texelDataType, dataForUpload));\n\n  webgl_util.callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, debug: boolean, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement) {\n  webgl_util.callAndCheck(\n      gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    webgl_util.callAndCheck(\n        gl, debug,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA,\n            gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n  } else {\n    webgl_util.callAndCheck(\n        gl, debug,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n            pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                HTMLVideoElement));\n  }\n\n  webgl_util.callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, debug, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2, debug,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, debug,\n      () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, debug, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, debug: boolean, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, this.debug, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(\n            this.gl, this.debug, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = webgl_util.getExtensionOrThrow(\n            this.gl, this.debug, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl, this.debug);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl, this.debug);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl, this.debug);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, this.debug, () => gl.finish());\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, this.debug, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, this.debug, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(\n          this.gl, this.debug, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(\n        this.gl, this.debug, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, this.debug, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, this.debug, rows, columns,\n        this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, this.debug, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShaderSource: string): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    const fragmentShader: WebGLShader =\n        webgl_util.createFragmentShader(gl, this.debug, fragmentShaderSource);\n    const vertexShader: WebGLShader =\n        gpgpu_util.createVertexShader(gl, this.debug);\n    const program: WebGLProgram = webgl_util.createProgram(\n        gl,\n        this.debug,\n    );\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.attachShader(program, vertexShader));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, this.debug, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, this.debug, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.debug, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(\n          this.gl, this.debug, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.debug, this.program);\n    }\n    webgl_util.callAndCheck(\n        this.gl, this.debug, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, this.debug, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, this.debug,\n        () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, this.debug, this.program, inputMatrixTexture, uniformLocation,\n        textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.debug, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, this.debug,\n        () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, this.debug, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl, this.debug,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, this.debug, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.debug, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(\n          this.gl, this.debug, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, this.debug, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, this.debug, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  source: string;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const userCode = program.userCode;\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(\n      inputInfos, outShapeInfo, userCode, program.packedInputs);\n\n  const webGLProgram = gpgpu.createProgram(source);\n\n  // Add special uniforms (NAN, INFINITY)\n  let infLoc: WebGLUniformLocation = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    const shouldThrow = false;\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData,\n    customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) =>\n        void): void {\n  validateBinaryAndProgram(binary.inShapeInfos, inputs);\n  validateBinaryAndProgram([binary.outShapeInfo], [output]);\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n\n  if (customSetup != null) {\n    customSetup(gpgpu, binary.webGLProgram);\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n    keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode;\n  return key;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      outputShape: number[], inputShape: number[],\n      convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n\n    const {\n      filterWidth,\n      inChannels,\n      strideWidth,\n      strideHeight,\n      padInfo,\n      outWidth,\n      dilationWidth,\n      dilationHeight,\n      dataFormat\n    } = convInfo;\n    const {left, top} = padInfo;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${\n            top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${\n            strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${\n            itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      aShape: [number, number, number], outputShape: [number, number, number],\n      transposeA = false, transposeB = false, addBias = false,\n      activation: string = null, hasPreluActivation = false) {\n    this.outputShape = outputShape;\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          vec4 a = getMatrixA(rc.x, ${aSample});\n          vec4 b = getMatrixB(rc.x, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(seed: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.seedLoc == null) {\n        this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n      }\n      gpgpu.gl.uniform1f(this.seedLoc, seed);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    if (rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', rank);\n      const dtype = getCoordsDataType(rank);\n      const outOfBoundsCondition =\n          getOutOfBoundsCondition(rank, outputShape, channels);\n      const setup = getSetup(\n          rank, outputShape[outputShape.length - 1],\n          outputShape[outputShape.length - 2], channels);\n      const output = getOutput(outputShape, channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n}\n\nfunction getSourceCoordsArr(rank: number, dims: string[]): string[] {\n  const coords = [];\n\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n      for (let d = 2; d < rank; d++) {\n        coord = `${dims[dims.length - 1 - d]},` + coord;\n      }\n\n      coords.push(coord);\n    }\n  }\n  return coords;\n}\n\nfunction getOutOfBoundsCondition(\n    rank: number, shape: number[], dims: string[]): string {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\nfunction getSetup(\n    rank: number, cols: number, rows: number, dims: string[]): string {\n  if (rank === 1) {\n    return '';\n  }\n\n  const innerDims = dims.slice(-2);\n\n  return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\n\nfunction getOutput(shape: number[], dims: string[]): string {\n  const rank = shape.length;\n  const sourceCoords = getSourceCoordsArr(rank, dims);\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${constantValue}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${constantValue}));\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(${constantValue});\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const windowSize = reduceInfo.windowSize;\n    const batchSize = reduceInfo.batchSize;\n    const inSize = reduceInfo.inSize;\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape)}\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${outputShape[1]};\n        int cols = ${outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.outputShape = x.shape;\n    const [, xHeight, xWidth, ] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.outputShape = x.shape;\n    const [, xHeight, xWidth, ] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const uniformPart = `uniform int start[${this.rank}];`;\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      uniform int start[${this.rank}];\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {PhysicalTextureType, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private freeTextures: {[shape: string]: WebGLTexture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: WebGLTexture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): WebGLTexture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n    this.numUsedTextures++;\n    this.log();\n\n    let newTexture: WebGLTexture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: WebGLTexture, shape: [number, number],\n      logicalTexType: TextureUsage, isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    this.freeTextures[shapeKey].push(texture);\n    this.numFreeTextures++;\n    this.numUsedTextures--;\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nconst CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nexport const SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const NEG = `return -x;`;\n\nexport const CEIL = `return ceil(x);`;\n\nexport const FLOOR = `return floor(x);`;\n\nexport const SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const IS_NAN = `return float(isnan(x));`;\n\nexport const IS_INF = `return float(isinf(x));`;\n\nexport const IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const EXP = `return exp(x);`;\n\nexport const EXPM1 = `return exp(x) - 1.0;`;\n\nexport const LOG = `if (x < 0.0) return NAN;\n  return log(x);`;\n\nexport const LOG1P = `return log(1.0 + x);`;\n\nexport const SQRT = `return sqrt(x);`;\n\nexport const RSQRT = `return inversesqrt(x);`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\n/**\n * mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n *\n * epsilon is the difference between 1.0 and the next representable\n * float. For a single precision 32 bit float this should be 2^-23, see:\n * https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n *\n * too_large = (x > -threshold) is value above which exp(x) may overflow\n * but softplus(x) == x is within machine epsilon\n *\n * too_small = (x < threshold) is value below which exp(x) may underflow,\n * but softplus(x) == exp(x) is within machine epsilon.\n */\nexport const SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const SIN = CHECK_NAN_SNIPPET + `\n  return sin(x);\n`;\n\nexport const COS = CHECK_NAN_SNIPPET + `\n  return cos(x);\n`;\n\nexport const TAN = `return tan(x);`;\n\nexport const ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));`;\n\nexport const ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const SQUARE = `return x * x;`;\n\nexport const RECIPROCAL = `return 1.0 / x;`;\n\nexport const LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const TO_INT = `return float(int(x));`;\n\nexport const CLONE = 'return x;';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const LOG = `\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {complex, DataId, div, engine, env, imag, max, MemoryInfo, range, real, RecursiveArray, scalar, softmax, tensor, tidy, TimingInfo, transpose} from '@tensorflow/tfjs-core';\nimport {backend_util, buffer, kernel_impls, slice_util, util} from '@tensorflow/tfjs-core';\nimport {DataStorage, DataType, KernelBackend, NumericDataType, Rank, Scalar, ShapeMap, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, TensorInfo, TypedArray, upcastType} from '@tensorflow/tfjs-core';\n\nconst {segment_util} = backend_util;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\n\nimport {AddNProgram} from './addn_gpu';\nimport {AddNPackedProgram} from './addn_packed_gpu';\nimport {ArgMinMaxProgram} from './argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from './argminmax_packed_gpu';\nimport {AvgPool2DBackpropProgram, AvgPool3DBackpropProgram} from './avg_pool_backprop_gpu';\nimport {BatchNormProgram} from './batchnorm_gpu';\nimport {BatchNormPackedProgram} from './batchnorm_packed_gpu';\nimport * as binaryop_complex_gpu from './binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from './binaryop_complex_gpu';\nimport * as binaryop_gpu from './binaryop_gpu';\nimport {BinaryOpProgram} from './binaryop_gpu';\nimport * as binaryop_packed_gpu from './binaryop_packed_gpu';\nimport {BinaryOpPackedProgram} from './binaryop_packed_gpu';\nimport {getWebGLContext} from './canvas_util';\nimport {ClipProgram} from './clip_gpu';\nimport {ClipPackedProgram} from './clip_packed_gpu';\nimport {ComplexAbsProgram} from './complex_abs_gpu';\nimport {ConcatProgram} from './concat_gpu';\nimport {ConcatPackedProgram} from './concat_packed_gpu';\nimport {Conv2DDerFilterProgram, Conv2DDerInputProgram, Conv3DDerFilterProgram, Conv3DDerInputProgram} from './conv_backprop_gpu';\nimport {DepthwiseConv2DDerFilterProgram, DepthwiseConv2DDerInputProgram} from './conv_backprop_gpu_depthwise';\nimport {Conv2DProgram, Conv3DProgram} from './conv_gpu';\nimport {DepthwiseConv2DProgram} from './conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from './conv_packed_gpu_depthwise';\nimport {CropAndResizeProgram} from './crop_and_resize_gpu';\nimport {CumSumProgram} from './cumsum_gpu';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {DepthToSpaceProgram} from './depth_to_space_gpu';\nimport {DiagProgram} from './diag_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport * as fft_gpu from './fft_gpu';\nimport {FFTProgram} from './fft_gpu';\nimport {FillProgram} from './fill_gpu';\nimport {GatherProgram} from './gather_gpu';\nimport {GatherNDProgram} from './gather_nd_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {Im2ColPackedProgram} from './im2col_packed_gpu';\nimport {LRNProgram} from './lrn_gpu';\nimport {LRNGradProgram} from './lrn_grad_gpu';\nimport {LRNPackedProgram} from './lrn_packed_gpu';\nimport {MaxPool2DBackpropProgram, MaxPool3DBackpropProgram} from './max_pool_backprop_gpu';\nimport {MatMulPackedProgram} from './mulmat_packed_gpu';\nimport {MultinomialProgram} from './multinomial_gpu';\nimport {OneHotProgram} from './onehot_gpu';\nimport {PackProgram} from './pack_gpu';\nimport {PadProgram} from './pad_gpu';\nimport {PadPackedProgram} from './pad_packed_gpu';\nimport {Pool2DProgram, Pool3DProgram} from './pool_gpu';\nimport {ReduceProgram} from './reduce_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport {ResizeBilinearBackpropProgram} from './resize_bilinear_backprop_gpu';\nimport {ResizeBilinearProgram} from './resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from './resize_bilinear_packed_gpu';\nimport {ResizeNearestNeigborBackpropProgram} from './resize_nearest_neighbor_backprop_gpu';\nimport {ResizeNearestNeighborProgram} from './resize_nearest_neighbor_gpu';\nimport {ReverseProgram} from './reverse_gpu';\nimport {ReversePackedProgram} from './reverse_packed_gpu';\nimport {ScatterProgram} from './scatter_gpu';\nimport {SegmentOpProgram} from './segment_gpu';\nimport {SelectProgram} from './select_gpu';\nimport {SliceProgram} from './slice_gpu';\nimport {SlicePackedProgram} from './slice_packed_gpu';\nimport {StridedSliceProgram} from './strided_slice_gpu';\nimport * as tex_util from './tex_util';\nimport {TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport {TileProgram} from './tile_gpu';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport * as unary_packed_op from './unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nimport {BackendValues} from '@tensorflow/tfjs-core';\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\nfunction mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return binaryop_packed_gpu.PRELU;\n    }\n    return binaryop_gpu.PRELU;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  private dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n  private cpuBackend: KernelBackend;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpgpu?: GPGPUContext) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() +\n        (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n        this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {};\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD});\n    return dataId;\n  }\n\n  move(dataId: DataId, values: BackendValues, shape: number[], dtype: DataType):\n      void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD});\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensors, slice, shape, isPacked} = texData;\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeData(res.dataId);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues = complexTensors.real.dataSync() as Float32Array;\n      const imagValues = complexTensors.imag.dataSync() as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensors, isPacked} = texData;\n\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeData(res.dataId);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n        env().getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(\n          `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n          `WEBGL_VERSION=2 not yet supported.`);\n    }\n\n    let buffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all(\n          [complexTensors.real.data(), complexTensors.imag.data()]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeData(tmpDownloadTarget.dataId);\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      this.disposeData(dataId);\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu\n                       .downloadMatrixFromPackedTexture(\n                           tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                       .subarray(0, size);\n\n      this.disposeData(tmpTarget.dataId);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals =\n        this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(\n                tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n    this.disposeData(output.dataId);\n\n    return vals;\n  }\n\n  async time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n      res['kernelMs'] = util.sum(kernelMs);\n      res['getExtraProfileInfo'] = () =>\n          kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n              .map(d => `${d.name}: ${d.ms}`)\n              .join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory(): WebGLMemoryInfo {\n    return {unreliable: false, numBytesInGPU: this.numBytesInGPU} as\n        WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  disposeData(dataId: DataId): void {\n    if (this.pendingDisposal.has(dataId)) {\n      return;\n    }\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return;\n    }\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensors} = this.texData.get(dataId);\n    if (complexTensors != null) {\n      complexTensors.real.dispose();\n      complexTensors.imag.dispose();\n    }\n    this.texData.delete(dataId);\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  private getCPUBackend(): KernelBackend|null {\n    if (!env().getBool('WEBGL_CPU_FORWARD')) {\n      return null;\n    }\n\n    if (this.cpuBackend == null) {\n      this.cpuBackend = engine().findBackend('cpu');\n    }\n\n    return this.cpuBackend;\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return this.getCPUBackend() != null &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  complex<T extends Tensor>(real: T, imag: T): T {\n    const result = this.makeOutput(real.shape, 'complex64');\n    const resultData = this.texData.get(result.dataId);\n    // The backend owns the reference to the underlying real and imaginary\n    // clones. These will explicitly get disposed when the complex tensor is\n    // disposed.\n    resultData.complexTensors = {\n      real: engine().keep(real.clone()),\n      imag: engine().keep(imag.clone())\n    };\n\n    return result as T;\n  }\n  real<T extends Tensor>(input: T): T {\n    const resultData = this.texData.get(input.dataId);\n    return resultData.complexTensors.real.clone() as T;\n  }\n  imag<T extends Tensor>(input: T): T {\n    const resultData = this.texData.get(input.dataId);\n    return resultData.complexTensors.imag.clone() as T;\n  }\n\n  slice<T extends Tensor>(x: T, begin: number[], size: number[]): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.slice(x, begin, size);\n    }\n    // Short-circuit computation if the slice is zero-sized.\n    if (util.sizeFromShape(size) === 0) {\n      return tensor([], size, x.dtype) as T;\n    }\n    const {isPacked} = this.texData.get(x.dataId);\n    const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n    if (isPacked || !isContinous) {\n      const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n          new SlicePackedProgram(size) :\n          new SliceProgram(size);\n      const customSetup = program.getCustomSetupFunc(begin);\n      return this.compileAndRun(program, [x], null, customSetup);\n    }\n    this.uploadToGPU(x.dataId);\n    return this.shallowSlice(x, begin, size) as T;\n  }\n\n  private shallowSlice(x: Tensor, begin: number[], size: number[]): Tensor {\n    const xTexData = this.texData.get(x.dataId);\n    const t = this.makeOutput(size, x.dtype);\n    const newTexData = this.texData.get(t.dataId);\n    // Copy texture data from the original tensor.\n    Object.assign(newTexData, xTexData);\n    newTexData.shape = size;\n    newTexData.dtype = x.dtype;\n    let flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n    if (xTexData.slice) {\n      // We are slicing an already sliced tensor, so we have to accumulate\n      // the offset.\n      flatOffset += xTexData.slice.flatOffset;\n    }\n    newTexData.slice = {\n      flatOffset,\n      // Point to the original dataId, which is used to do ref counting.\n      origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n    };\n\n    // Increase the ref count for that data bucket.\n    const refCount = this.dataRefCount.get(newTexData.slice.origDataId) || 1;\n    this.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n\n    return t;\n  }\n\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[]): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.stridedSlice(x, begin, end, strides);\n    }\n\n    const outShape = slice_util.computeOutShape(begin, end, strides);\n\n    if (outShape.some(axis => axis === 0)) {\n      return tensor([], outShape) as T;\n    }\n\n    const program = new StridedSliceProgram(begin, strides, outShape);\n    return this.compileAndRun(program, [x]);\n  }\n\n  reverse<T extends Tensor>(x: T, axis: number[]): T {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new ReversePackedProgram(x.shape, axis) :\n        new ReverseProgram(x.shape, axis);\n    return this.compileAndRun(program, [x]);\n  }\n\n  concat(tensors: Tensor[], axis: number): Tensor {\n    if (tensors[0].dtype === 'complex64') {\n      const reals = tensors.map((t) => real(t));\n      const imags = tensors.map((t) => imag(t));\n      return complex(this.concat(reals, axis), this.concat(imags, axis));\n    }\n    if (this.shouldExecuteOnCPU(tensors)) {\n      return this.cpuBackend.concat(tensors, axis);\n    }\n\n    if (tensors.length === 1) {\n      return tensors[0];\n    }\n    if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n      const midIndex = Math.floor(tensors.length / 2);\n      const leftSide = this.concat(tensors.slice(0, midIndex), axis);\n      const rightSide = this.concat(tensors.slice(midIndex), axis);\n      return this.concat([leftSide, rightSide], axis);\n    }\n    if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && tensors[0].rank > 1) {\n      const program = new ConcatPackedProgram(tensors.map(t => t.shape), axis);\n      return this.compileAndRun(program, tensors);\n    }\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const outShape =\n        backend_util.computeOutShape(tensors.map(t => t.shape), axis);\n    const tensors2D =\n        tensors.map(t => t.as2D(-1, util.sizeFromShape(t.shape.slice(axis))));\n    const program = new ConcatProgram(tensors2D.map(t => t.shape));\n    const res: Tensor = this.compileAndRun(program, tensors2D);\n    return res.reshape(outShape);\n  }\n\n  neg<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.neg(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.NEG, x.dtype) as T;\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.NEG);\n    return this.compileAndRun(program, [x]);\n  }\n\n  batchMatMul(\n      a: Tensor3D, b: Tensor3D, transposeA: boolean,\n      transposeB: boolean): Tensor3D {\n    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n    const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n    const [batch, , ] = a.shape;\n\n    // Since the matrices are vectors, it is faster to call mul().sum()\n    // because sum() is O(sqrt(N)) due to divide-and-conquer.\n    if ((outerShapeA === 1 || outerShapeB === 1) &&\n        sharedDim > MATMUL_SHARED_DIM_THRESHOLD) {\n      if (transposeA) {\n        a = transpose(a, [0, 2, 1]);\n      }\n      if (transposeB) {\n        b = transpose(b, [0, 2, 1]);\n      }\n\n      const a3D = outerShapeB === 1 ? a : a.as3D(batch, sharedDim, 1);\n      const axis = outerShapeB === 1 ? 2 : 1;\n      const b3D = outerShapeB === 1 ? b.as3D(batch, 1, sharedDim) : b;\n      return this.multiply(a3D, b3D).sum(axis, true /* keepDims */);\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB);\n    return this.compileAndRun<Tensor3D>(program, [a, b], dtype);\n  }\n\n  fusedBatchMatMul(\n      {a, b, transposeA, transposeB, bias, activation, preluActivationWeights}:\n          backend_util.FusedBatchMatMulConfig): Tensor3D {\n    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n    const [batch, , ] = a.shape;\n\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new MatMulPackedProgram(\n        a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB,\n        hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorInfo[] = [a, b];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    return this.compileAndRun<Tensor3D>(program, inputs, dtype);\n  }\n\n  multiply(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64') {\n      const aData = this.texData.get(a.dataId);\n      const bData = this.texData.get(b.dataId);\n\n      const realProgram = new BinaryOpComplexProgram(\n          binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n      const imagProgram = new BinaryOpComplexProgram(\n          binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n      const inputs = [\n        this.makeComplexComponentTensorInfo(a, aData.complexTensors.real),\n        this.makeComplexComponentTensorInfo(a, aData.complexTensors.imag),\n        this.makeComplexComponentTensorInfo(b, bData.complexTensors.real),\n        this.makeComplexComponentTensorInfo(b, bData.complexTensors.imag)\n      ];\n      const real = this.compileAndRun<Tensor>(realProgram, inputs);\n      const imag = this.compileAndRun<Tensor>(imagProgram, inputs);\n\n      const complex = this.complex(real, imag);\n      real.dispose();\n      imag.dispose();\n      return complex;\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.multiply(a, b);\n    }\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.MUL, a.dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], a.dtype);\n  }\n\n  batchNorm(\n      x: Tensor4D, mean: Tensor4D|Tensor1D, variance: Tensor4D|Tensor1D,\n      offset?: Tensor4D|Tensor1D, scale?: Tensor4D|Tensor1D,\n      varianceEpsilon?: number): Tensor4D {\n    const inputs = [x, mean, variance];\n\n    let offsetShape = null;\n    if (offset != null) {\n      offsetShape = offset.shape;\n      inputs.push(offset);\n    }\n\n    let scaleShape = null;\n    if (scale != null) {\n      scaleShape = scale.shape;\n      inputs.push(scale);\n    }\n\n    if (env().getBool('WEBGL_PACK_NORMALIZATION')) {\n      const batchNormPackedProgram = new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n      return this.compileAndRun<Tensor4D>(batchNormPackedProgram, inputs);\n    }\n\n    const batchNormProgram = new BatchNormProgram(\n        x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n        varianceEpsilon);\n    return this.compileAndRun(batchNormProgram, inputs);\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, radius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new LRNPackedProgram(x.shape, radius, bias, alpha, beta) :\n        new LRNProgram(x.shape, radius, bias, alpha, beta);\n    return this.compileAndRun(program, [x]);\n  }\n\n  LRNGrad(\n      dy: Tensor4D, inputImage: Tensor4D, outputImage: Tensor4D,\n      depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    const program =\n        new LRNGradProgram(inputImage.shape, depthRadius, bias, alpha, beta);\n    return this.compileAndRun(program, [inputImage, outputImage, dy]);\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    if (x.dtype === 'string') {\n      const data = this.readSync(x.dataId) as Uint8Array[];\n      const decodedData = data.map(d => util.decodeString(d));\n      const buf = buffer(x.shape, x.dtype, decodedData);\n      return tile(buf, reps) as T;\n    }\n    const program = new TileProgram(x.shape, reps);\n    return this.compileAndRun(program, [x]);\n  }\n\n  pad<T extends Tensor>(\n      x: T, paddings: Array<[number, number]>, constantValue: number): T {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new PadPackedProgram(x.shape, paddings, constantValue) :\n        new PadProgram(x.shape, paddings, constantValue);\n    return this.compileAndRun(program, [x]);\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    if (this.shouldExecuteOnCPU([x, indices])) {\n      return this.cpuBackend.gather(x, indices, axis);\n    }\n    const program = new GatherProgram(x.shape, indices.size, axis);\n    return this.compileAndRun(program, [x, indices]);\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T {\n    util.assert(\n        x.rank <= 4,\n        () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted =\n        backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted =\n        backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords =\n        backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize =\n        backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n    return transpose(x.reshape(reshaped), permuted)\n               .reshape(reshapedPermuted)\n               .slice(sliceBeginCoords, sliceSize) as T;\n  }\n\n  spaceToBatchND<T extends Tensor>(\n      x: T, blockShape: number[], paddings: Array<[number, number]>): T {\n    util.assert(\n        x.rank <= 4,\n        () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const completePaddings: Array<[number, number]> = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n      completePaddings.push([0, 0]);\n    }\n\n    const paddedX = x.pad(completePaddings);\n\n    const reshapedPaddedShape =\n        backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n    const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n        reshapedPaddedShape.length, blockShape.length, false);\n\n    const flattenShape = backend_util.getReshapedPermuted(\n        paddedX.shape, blockShape, prod, false);\n\n    return transpose(\n               paddedX.reshape(reshapedPaddedShape),\n               permutedReshapedPaddedPermutation)\n               .reshape(flattenShape) as T;\n  }\n\n  private reduce(\n      x: Tensor2D, reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod',\n      dtype: DataType): Tensor2D {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = {windowSize, inSize, batchSize};\n    const program = new ReduceProgram(reduceInfo, reduceType);\n    const output = this.compileAndRun<Tensor2D>(program, [x], dtype);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n      return output;\n    }\n    return this.reduce(output, reduceType, dtype);\n  }\n\n  private argReduce(\n      x: Tensor2D, reduceType: 'max'|'min',\n      bestIndicesA: Tensor2D = null): Tensor2D {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n    if (bestIndicesA != null) {\n      batchSize = bestIndicesA.shape[0];\n      inSize = bestIndicesA.shape[1];\n    }\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = {windowSize, inSize, batchSize};\n    const program =\n        new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const inputs = [x];\n    if (bestIndicesA != null) {\n      inputs.push(bestIndicesA);\n    }\n    const output = this.compileAndRun<Tensor2D>(program, inputs, 'int32');\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n      return output;\n    }\n    return this.argReduce(x, reduceType, output);\n  }\n\n  private argReducePacked(\n      x: Tensor, reduceType: 'max'|'min', bestIndicesA: Tensor = null): Tensor {\n    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n    const inSize = inShape[inShape.length - 1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const program = new ArgMinMaxPackedProgram(\n        inShape, windowSize, reduceType, bestIndicesA == null);\n    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n    const output = this.compileAndRun<Tensor>(program, inputs, 'int32');\n    if (output.rank === x.rank) {\n      return this.argReducePacked(x, reduceType, output);\n    }\n    return output;\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = tf.sumOutType(x.dtype);\n    return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n  }\n\n  prod(x: Tensor, axes: number[]): Tensor {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.prod(x, axes);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = tf.sumOutType(x.dtype);\n    return this.reduce(a2D, 'prod', outputDType).reshape(outShape);\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    let axis = 0;\n    const permutation = backend_util.getAxesPermutation([axis], x.rank);\n    let permutedX = x;\n    if (permutation != null) {\n      permutedX = transpose(x, permutation);\n      axis = backend_util.getInnerMostAxes(1, x.rank)[0];\n    }\n\n    const outShape =\n        segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n    const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n    const a2D = permutedX.as2D(-1, inSize);\n    const outputDType = tf.sumOutType(x.dtype);\n    let result =\n        this.segOpCompute(\n                a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments)\n            .reshape(outShape);\n    if (permutation != null) {\n      result =\n          transpose(result, backend_util.getUndoAxesPermutation(permutation));\n    }\n    return result;\n  }\n\n  private segOpCompute(\n      x: Tensor2D, segOpType: 'unsortedSegmentSum', segmentIds: Tensor1D,\n      dtype: DataType, numSegments: number): Tensor2D {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize =\n        segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n    const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n    const program = new SegmentOpProgram(segOpInfo, segOpType);\n    const output =\n        this.compileAndRun<Tensor2D>(program, [x, segmentIds], dtype);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === numSegments) {\n      return output;\n    }\n    segmentIds = range(0, numSegments).tile([inSize / windowSize]);\n    return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);\n  }\n\n  private argMinMaxReduce(x: Tensor, axis: number, reduceType: 'min'|'max'):\n      Tensor {\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims(\n        'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n        x.rank);\n    if (!env().getBool('WEBGL_PACK_REDUCE') || x.rank <= 2) {\n      const [outShape, reduceShape] =\n          backend_util.computeOutAndReduceShapes(x.shape, axes);\n      const inSize = util.sizeFromShape(reduceShape);\n      const a2D = x.as2D(-1, inSize);\n      return this.argReduce(a2D, reduceType).reshape(outShape);\n    }\n    return this.argReducePacked(x, reduceType);\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    return this.argMinMaxReduce(x, axis, 'min');\n  }\n\n  argMax(x: Tensor, axis: number): Tensor {\n    return this.argMinMaxReduce(x, axis, 'max');\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    if (axis !== x.rank - 1) {\n      throw new Error(\n          `WebGL cumsum shader expects an inner-most axis=${x.rank - 1} ` +\n          `but got axis=${axis}`);\n    }\n    const program = new CumSumProgram(x.shape, exclusive, reverse);\n    return this.compileAndRun(program, [x]);\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.EQUAL, 'bool');\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.NOT_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.less(a, b);\n    }\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.greater(a, b);\n    }\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(\n          a, b, binaryop_packed_gpu.GREATER_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  logicalNot<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_AND, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_OR, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  select(condition: Tensor, a: Tensor, b: Tensor): Tensor {\n    const program = new SelectProgram(condition.rank, a.shape, a.rank);\n    return this.compileAndRun(\n        program, [condition, a, b], upcastType(a.dtype, b.dtype));\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean): [T, T] {\n    const xVals = x.dataSync();\n    return topkImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n  }\n\n  minimum(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.minimum(a, b);\n    }\n\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MIN, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MOD, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  maximum(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.maximum(a, b);\n    }\n\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MAX, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  all(x: Tensor, axes: number[]): Tensor {\n    backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'all', a2D.dtype).reshape(outShape);\n  }\n\n  any(x: Tensor, axes: number[]): Tensor {\n    backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'any', a2D.dtype).reshape(outShape);\n  }\n\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    const op = binaryop_gpu.INT_DIV;\n    const outputDtype = 'int32';\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(\n          a, b, binaryop_packed_gpu.INT_DIV, outputDtype);\n    }\n    const program = new BinaryOpProgram(op, a.shape, b.shape);\n    return this.compileAndRun<Tensor>(program, [a, b], outputDtype);\n  }\n\n  add(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.ADD);\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.add(a, b);\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.ADD, dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n    return this.compileAndRun<Tensor>(program, [a, b], dtype);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    return this.compileAndRun<Tensor>(program, [x], dtype);\n  }\n\n  private packedBinaryOp(\n      a: TensorInfo, b: TensorInfo, op: string, dtype: DataType,\n      checkOutOfBounds = false) {\n    const program =\n        new BinaryOpPackedProgram(op, a.shape, b.shape, checkOutOfBounds);\n    return this.compileAndRun<Tensor>(program, [a, b], dtype);\n  }\n\n  /**\n   * Computes a complex binary operation that can be decomposed into a simple\n   * binary operation on both the real and imagary parts.\n   */\n  private complexSeparableBinaryOp(a: Tensor, b: Tensor, op: string): Tensor {\n    const aData = this.texData.get(a.dataId);\n    const bData = this.texData.get(b.dataId);\n\n    const [real, imag] = [\n      [aData.complexTensors.real, bData.complexTensors.real],\n      [aData.complexTensors.imag, bData.complexTensors.imag]\n    ].map(complexParts => {\n      const [aPart, bPart] = complexParts;\n\n      const aHandle = this.makeComplexComponentTensorInfo(a, aPart);\n      const bHandle = this.makeComplexComponentTensorInfo(b, bPart);\n\n      const program = new BinaryOpProgram(op, a.shape, b.shape);\n      return this.compileAndRun<Tensor>(\n          program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n    });\n\n    const complex = this.complex(real, imag);\n    real.dispose();\n    imag.dispose();\n    return complex;\n  }\n\n  // Returns a TensorInfo with the complex shape and the dataId of the\n  // underlying part. We need to do this because a reshaped complex tensor is\n  // not reflected in its parts.\n  private makeComplexComponentTensorInfo(\n      complexTensor: Tensor, complexPart: Tensor): TensorInfo {\n    return {\n      dataId: complexPart.dataId,\n      dtype: complexPart.dtype,\n      shape: complexTensor.shape\n    };\n  }\n\n  addN<T extends Tensor>(tensors: T[]): T {\n    if (tensors.length === 1) {\n      return tensors[0];\n    }\n\n    // Limit the number of uploaded textures for optimization.\n    if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n      const midIndex = Math.floor(tensors.length / 2);\n      const leftSide = this.addN(tensors.slice(0, midIndex));\n      const rightSide = this.addN(tensors.slice(midIndex));\n      return this.addN([leftSide, rightSide]);\n    }\n\n    const dtype =\n        tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n    const shapes = tensors.map(t => t.shape);\n    // We can make sure shapes are identical in op level.\n    const usePackedOp = env().getBool('WEBGL_PACK');\n    const program = usePackedOp ?\n        new AddNPackedProgram(tensors[0].shape, shapes) :\n        new AddNProgram(tensors[0].shape, shapes);\n    return this.compileAndRun<T>(program, tensors, dtype);\n  }\n\n  subtract(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.SUB);\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.subtract(a, b);\n    }\n    const dtype = upcastType(a.dtype, b.dtype);\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.SUB, a.dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n    return this.compileAndRun<Tensor>(program, [a, b], dtype);\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    const usePackedOp = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n    const program = usePackedOp ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.POW, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n    const dtype = upcastType(a.dtype, b.dtype);\n    return this.compileAndRun<T>(program, [a, b], dtype);\n  }\n\n  ceil<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.ceil(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.CEIL, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.CEIL);\n    return this.compileAndRun(program, [x]);\n  }\n\n  floor<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.floor(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.FLOOR, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.FLOOR);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sign<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  isNaN<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_NAN);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n  isInf<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_INF);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n  isFinite<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_FINITE);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n\n  round<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ROUND);\n    return this.compileAndRun(program, [x]);\n  }\n\n  exp<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.exp(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.EXP, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.EXP);\n    return this.compileAndRun(program, [x]);\n  }\n\n  expm1<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.expm1(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.EXPM1, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.EXPM1);\n    return this.compileAndRun(program, [x]);\n  }\n\n  softmax<T extends Tensor>(logits: T, dim: number): T {\n    const axes = util.parseAxisParam([dim], logits.shape);\n    // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n    // modularization.\n    const maxLogit = max(logits, axes);\n    const expandedShape =\n        backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const a = this.subtract(logits, maxLogit.reshape(expandedShape));\n    const b = this.exp(a);\n    const sumExp = this.sum(b, axes).reshape(expandedShape);\n\n    // TODO(annxingyuan): Call divImpl rather than op as part of softmax kernel\n    // modularization.\n    return div(b, sumExp);\n  }\n\n  log<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.log(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_packed_op.LOG, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG);\n    return this.compileAndRun(program, [x]);\n  }\n\n  log1p<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG1P);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sqrt<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SQRT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  rsqrt<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.rsqrt(x);\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.RSQRT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  reciprocal<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.RECIPROCAL);\n    return this.compileAndRun(program, [x]);\n  }\n\n  relu<T extends Tensor>(x: T): T {\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (env().getBool('WEBGL_PACK')) {\n      program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU);\n    } else {\n      program = new UnaryOpProgram(x.shape, unary_op.RELU);\n    }\n    return this.compileAndRun(program, [x]);\n  }\n\n  relu6<T extends Tensor>(x: T): T {\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (env().getBool('WEBGL_PACK')) {\n      program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU6);\n    } else {\n      program = new UnaryOpProgram(x.shape, unary_op.RELU6);\n    }\n    return this.compileAndRun(program, [x]);\n  }\n\n  prelu<T extends Tensor>(x: T, alpha: T): T {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(\n            binaryop_packed_gpu.PRELU, x.shape, alpha.shape) :\n        new BinaryOpProgram(binaryop_gpu.PRELU, x.shape, alpha.shape);\n    return this.compileAndRun(program, [x, alpha]);\n  }\n\n  elu<T extends Tensor>(x: T): T {\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_packed_op.ELU, x.dtype) as T;\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.ELU);\n    return this.compileAndRun(program, [x]);\n  }\n\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(\n            binaryop_packed_gpu.ELU_DER, dy.shape, y.shape) :\n        new BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);\n    return this.compileAndRun(program, [dy, y]);\n  }\n\n  selu<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SELU);\n    return this.compileAndRun(program, [x]);\n  }\n\n  int<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TO_INT);\n    return this.compileAndRun(program, [x], 'int32');\n  }\n\n  clip<T extends Tensor>(x: T, min: number, max: number): T {\n    let program;\n    if (env().getBool('WEBGL_PACK_CLIP')) {\n      program = new ClipPackedProgram(x.shape);\n    } else {\n      program = new ClipProgram(x.shape);\n    }\n    const customSetup = program.getCustomSetupFunc(min, max);\n    return this.compileAndRun(program, [x], null, customSetup);\n  }\n\n  abs<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.abs(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  complexAbs<T extends Tensor>(x: T): T {\n    const xData = this.texData.get(x.dataId);\n\n    const program = new ComplexAbsProgram(x.shape);\n    const inputs = [\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n    ];\n\n    return this.compileAndRun<Tensor>(program, inputs) as T;\n  }\n\n  sigmoid<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGMOID);\n    return this.compileAndRun(program, [x]);\n  }\n\n  softplus<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SOFTPLUS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sin<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cos<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.COS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  tan<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TAN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  asin<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASIN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  acos<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atan<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATAN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atan2<T extends Tensor>(a: T, b: T): T {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.ATAN2, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  sinh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SINH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cosh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.COSH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  tanh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TANH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  asinh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASINH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  acosh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOSH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atanh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATANH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  erf<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ERF);\n    return this.compileAndRun(program, [x]);\n  }\n\n  step<T extends Tensor>(x: T, alpha: number): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n    return this.compileAndRun(program, [x]);\n  }\n\n  private conv2dByMatMul(\n      x: Tensor4D, filter: Tensor4D, convInfo: backend_util.Conv2DInfo,\n      bias?: Tensor, activation?: backend_util.Activation,\n      preluActivationWeights?: Tensor): Tensor4D {\n    // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n    // result from 2D to 4D.\n    const xShape = x.shape;\n    const xTexData = this.texData.get(x.dataId);\n    const sharedMatMulDim = convInfo.inChannels;\n    const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n    const outerShapeFilter = convInfo.outChannels;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const transposeA = false;\n    const transposeB = false;\n\n    // TODO: Once reduction ops are packed, batchMatMul will always be packed\n    // and we can remove this condition.\n    const batchMatMulWillBeUnpacked =\n        (outerShapeX === 1 || outerShapeFilter === 1) &&\n        sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n    const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n\n    if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') ||\n        !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n        !reshapeWillBeExpensive) {\n      const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n                                           xShape[0] * xShape[2] * xShape[3];\n      const xReshaped = this.reshape(x, [1, targetShape, convInfo.inChannels]);\n      const filterReshaped =\n          this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n\n      return this.reshape<Rank.R4>(\n          this.fusedBatchMatMul({\n            a: xReshaped as Tensor3D,\n            b: filterReshaped as Tensor3D,\n            transposeA,\n            transposeB,\n            bias,\n            activation,\n            preluActivationWeights\n          }),\n          convInfo.outShape);\n    }\n\n    // Following optimization is specific to packed |x| with odd row count\n    // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n    // we avoid expensive packed 2x2 reshape by padding row count to next,\n    // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n    // even-rows tensor before the operation and, after the batchMatMul,\n    // fix the even-rows result to have odd number of rows.\n    const targetShape = isChannelsLast ?\n        xShape[0] * xShape[1] * (xShape[2] + 1) :\n        xShape[0] * xShape[2] * (xShape[3] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing row count, after batchMatMul->...->compileProgram leads to\n    // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even row count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped =\n        this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n\n    const pointwiseConv = this.fusedBatchMatMul({\n      a: xReshaped as Tensor3D,\n      b: filterReshaped as Tensor3D,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights\n    });\n    const pointwiseConvTexData = this.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n    return engine().makeTensorFromDataId(\n               pointwiseConv.dataId, convInfo.outShape, pointwiseConv.dtype) as\n        Tensor4D;\n  }\n\n  private conv2dWithIm2Row(\n      x: Tensor4D, filter: Tensor4D, convInfo: backend_util.Conv2DInfo,\n      bias?: Tensor, activation?: backend_util.Activation,\n      preluActivationWeights?: Tensor): Tensor4D {\n    // Rearranges conv2d input so each block to be convolved over forms the\n    // column of a new matrix with shape [filterWidth * filterHeight *\n    // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n    // output channel forms a row of a new matrix with shape [outChannels,\n    // filterWidth * filterHeight * inChannels]. The convolution is then\n    // computed by multiplying these matrices and reshaping the result.\n    const {\n      filterWidth,\n      filterHeight,\n      inChannels,\n      outWidth,\n      outHeight,\n      dataFormat\n    } = convInfo;\n\n    const isChannelsLast = dataFormat === 'channelsLast';\n\n    const sharedDim = filterWidth * filterHeight * inChannels;\n    const numCols = outHeight * outWidth;\n    const x2ColShape = [sharedDim, numCols];\n    const transposeA = true;\n    const transposeB = false;\n\n    const xSqueezed = x.squeeze([0]);\n    const w2Row = filter.reshape([1, sharedDim, -1]);\n\n    const im2ColProgram =\n        new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n    const im2Col: Tensor3D =\n        this.compileAndRun<Tensor2D>(im2ColProgram, [xSqueezed]).reshape([\n          1, x2ColShape[0], x2ColShape[1]\n        ]);\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, true) : null;\n    const matmulProgram = new MatMulPackedProgram(\n        im2Col.shape, [1, numCols, convInfo.outChannels], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorInfo[] = [im2Col, w2Row];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    const product = this.compileAndRun<Tensor4D>(matmulProgram, inputs);\n\n    if (isChannelsLast) {\n      return product.reshape([1, outHeight, outWidth, convInfo.outChannels]);\n    } else {\n      return product.reshape([1, convInfo.outChannels, outHeight, outWidth]);\n    }\n  }\n\n  fusedConv2d(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          backend_util.FusedConv2DConfig): Tensor4D {\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')) {\n      return this.conv2dByMatMul(\n          input, filter, convInfo, bias, activation, preluActivationWeights);\n    }\n    if (env().getBool('WEBGL_CONV_IM2COL') && input.shape[0] === 1) {\n      return this.conv2dWithIm2Row(\n          input, filter, convInfo, bias, activation, preluActivationWeights);\n    }\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorInfo[] = [input, filter];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    return this.compileAndRun(program, inputs);\n  }\n\n  conv2d(x: Tensor4D, filter: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')) {\n      return this.conv2dByMatMul(x, filter, convInfo);\n    }\n    if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n      return this.conv2dWithIm2Row(x, filter, convInfo);\n    }\n    const program = new Conv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  conv2dDerInput(\n      dy: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const program = new Conv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  conv2dDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    const program = new Conv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  fusedDepthwiseConv2D(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          backend_util.FusedConv2DConfig): Tensor4D {\n    const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n        convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1;\n    const fusedActivation = activation ?\n        mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n        null;\n    const inputs: Tensor[] = [input, filter];\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (hasBias) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n\n    let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n    if (shouldPackDepthwiseConv) {\n      program = new DepthwiseConvPacked2DProgram(\n          convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n      return this.compileAndRun(program, inputs);\n    }\n\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n    return this.compileAndRun(program, inputs);\n  }\n\n  depthwiseConv2D(\n      x: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n    if (env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n        convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1) {\n      program = new DepthwiseConvPacked2DProgram(convInfo);\n      return this.compileAndRun(program, [x, filter]);\n    }\n\n    program = new DepthwiseConv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  depthwiseConv2DDerInput(\n      dy: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const program = new DepthwiseConv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  depthwiseConv2DDerFilter(\n      x: Tensor4D, dy: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  conv3d(x: Tensor5D, filter: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const program = new Conv3DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  conv3dDerInput(\n      dy: Tensor5D, filter: Tensor5D,\n      convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const program = new Conv3DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  conv3dDerFilter(x: Tensor5D, dy: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const program = new Conv3DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  maxPool(x: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const program = new Pool2DProgram(convInfo, 'max', false);\n    return this.compileAndRun(program, [x]);\n  }\n\n  avgPool(x: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const program = new Pool2DProgram(convInfo, 'avg', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  maxPoolBackprop(\n      dy: Tensor4D, x: Tensor4D, y: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const getPositions = true;\n    const maxPoolPositionsProgram =\n        new Pool2DProgram(convInfo, 'max', getPositions);\n    const maxPoolPositions: Tensor4D =\n        this.compileAndRun(maxPoolPositionsProgram, [x]);\n\n    const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n    const result = this.compileAndRun(\n        maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n    maxPoolPositions.dispose();\n    return result as Tensor4D;\n  }\n\n  avgPoolBackprop(dy: Tensor4D, x: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n    return this.compileAndRun(avgPoolBackpropProgram, [dy], x.dtype);\n  }\n\n  cast<T extends Tensor>(x: T, dtype: DataType): T {\n    return backend_util.castTensor(x, dtype, this);\n  }\n\n  unstack(x: Tensor, axis: number): Tensor[] {\n    const num = x.shape[axis];\n    const outShape: number[] = new Array(x.rank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < x.rank; i++) {\n      if (i !== axis) {\n        outShape[outIndex++] = x.shape[i];\n      }\n    }\n\n    const begin = new Array(x.rank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n      begin[axis] = i;\n      res[i] = this.slice(x, begin, size).reshape(outShape);\n    }\n    return res;\n  }\n\n  avgPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const program = new Pool3DProgram(convInfo, 'avg', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  avgPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const avgPool3dBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n    return this.compileAndRun(avgPool3dBackpropProgram, [dy], x.dtype);\n  }\n\n  maxPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const program = new Pool3DProgram(convInfo, 'max', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  maxPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, y: Tensor5D,\n      convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const getPositions = true;\n    const maxPool3dPositionsProgram =\n        new Pool3DProgram(convInfo, 'max', getPositions);\n    const maxPool3dPositions: Tensor5D =\n        this.compileAndRun(maxPool3dPositionsProgram, [x]);\n    const maxPool3dBackPropProgram = new MaxPool3DBackpropProgram(convInfo);\n    const result = this.compileAndRun(\n        maxPool3dBackPropProgram, [dy, maxPool3dPositions], x.dtype);\n    maxPool3dPositions.dispose();\n    return result as Tensor5D;\n  }\n\n  reshape<R extends Rank>(x: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const texData = this.texData.get(x.dataId);\n    if (texData.isPacked && !webgl_util.isReshapeFree(x.shape, shape) &&\n        !(texData.texture !== null &&\n          webgl_util.isReshapeFree(texData.shape, shape))) {\n      const info = this.packedReshape(x, shape);\n      return engine().makeTensorFromDataId(\n                 info.dataId, info.shape, info.dtype) as Tensor<R>;\n    }\n    return backend_util.reshapeTensor(x, shape);\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n        new ResizeBilinearPackedProgram(\n            x.shape, newHeight, newWidth, alignCorners) :\n        new ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean):\n      Tensor4D {\n    const program = new ResizeBilinearBackpropProgram(dy, x, alignCorners);\n\n    return this.compileAndRun(program, [dy]);\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    const program = new ResizeNearestNeighborProgram(\n        x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x]);\n  }\n\n  resizeNearestNeighborBackprop(\n      dy: Tensor4D, x: Tensor4D, alignCorners: boolean): Tensor4D {\n    const program =\n        new ResizeNearestNeigborBackpropProgram(dy, x, alignCorners);\n    return this.compileAndRun(program, [dy]);\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    const probs = normalized ? logits : softmax(logits);\n    const batchSize = probs.shape[0];\n    const numOutcomes = probs.shape[1];\n    const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n    const customSetup = program.getCustomSetupFunc(seed);\n    return this.compileAndRun(program, [probs], 'int32', customSetup);\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    const program = new OneHotProgram(indices.size, depth, onValue, offValue);\n    return this.compileAndRun(program, [indices]);\n  }\n\n  diag(x: Tensor): Tensor {\n    const program = new DiagProgram(x.size);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cropAndResize(\n      image: Tensor4D, boxes: Tensor2D, boxIndex: Tensor1D,\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number): Tensor4D {\n    const program = new CropAndResizeProgram(\n        image.shape, boxes.shape, cropSize, method, extrapolationValue);\n    return this.compileAndRun(program, [image, boxes, boxIndex], 'float32');\n  }\n\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: 'NHWC'|'NCHW'):\n      Tensor4D {\n    util.assert(\n        blockSize > 1,\n        () =>\n            `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n    const batchSize = x.shape[0];\n    const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n    const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n    const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n\n    const outputShape = (dataFormat === 'NHWC') ?\n        [batchSize, outputHeight, outputWidth, outputDepth] :\n        [batchSize, outputDepth, outputHeight, outputWidth];\n\n    const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n    return this.compileAndRun(program, [x]);\n  }\n\n  split<T extends Tensor>(x: T, sizeSplits: number[], axis: number): T[] {\n    return split(x, sizeSplits, axis);\n  }\n\n  scatterND<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        backend_util.calculateShapes(updates, indices, shape);\n\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    const flattenIndices = indices.reshape([numUpdates, sliceRank]);\n    const flattenX = updates.reshape([numUpdates, sliceSize]);\n\n    if (outputSize === 0) {\n      return backend_util.reshapeTensor(tensor([]), shape);\n    }\n    const defaultValue = scalar(0);\n    const program = new ScatterProgram(\n        numUpdates, sliceRank, flattenIndices.rank, flattenX.rank, strides,\n        flattenShape);\n    const res: Tensor =\n        this.compileAndRun(program, [flattenX, flattenIndices, defaultValue]);\n    return res.reshape(shape);\n  }\n\n  sparseToDense<R extends Rank>(\n      sparseIndices: Tensor, sparseValues: Tensor, outputShape: ShapeMap[R],\n      defaultValue: Scalar): Tensor<R> {\n    const {sliceRank, numUpdates, strides, outputSize} =\n        backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n\n    const sumDupeIndices = false;\n    const program = new ScatterProgram(\n        numUpdates, sliceRank, sparseIndices.rank, sparseValues.rank, strides,\n        [outputSize, 1], sumDupeIndices);\n    const res: Tensor = this.compileAndRun(\n        program, [sparseValues, sparseIndices, defaultValue]);\n    return res.reshape(outputShape);\n  }\n\n  fft(x: Tensor2D): Tensor2D {\n    const inverse = false;\n    return this.fftImpl(x, inverse);\n  }\n\n  ifft(x: Tensor2D): Tensor2D {\n    const inverse = true;\n    return this.fftImpl(x, inverse);\n  }\n\n  private fftImpl(x: Tensor2D, inverse: boolean): Tensor2D {\n    const xData = this.texData.get(x.dataId);\n\n    const realProgram =\n        new FFTProgram(fft_gpu.COMPLEX_FFT.REAL, x.shape, inverse);\n    const imagProgram =\n        new FFTProgram(fft_gpu.COMPLEX_FFT.IMAG, x.shape, inverse);\n    const inputs = [\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n    ];\n\n    const real = this.compileAndRun<Tensor>(realProgram, inputs);\n    const imag = this.compileAndRun<Tensor>(imagProgram, inputs);\n    const complex = this.complex(real, imag).as2D(x.shape[0], x.shape[1]);\n    real.dispose();\n    imag.dispose();\n    return complex;\n  }\n\n  gatherND(x: Tensor, indices: Tensor): Tensor {\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n\n    const [resultShape, numSlices, sliceSize, strides] =\n        backend_util.prepareAndValidate(x, indices);\n\n    const flattenIndices = indices.reshape([numSlices, sliceRank]);\n    const flattenX = x.reshape([x.size / sliceSize, sliceSize]);\n    const program =\n        new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n    const res: Tensor = this.compileAndRun(program, [flattenX, flattenIndices]);\n    return res.reshape(resultShape);\n  }\n\n  fill<R extends Rank>(\n      shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n    dtype = dtype || util.inferDtype(value);\n\n    if (dtype === 'string') {\n      // String type should be handled in CPU memory.\n      const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n      values.fill(value as string);\n      return engine().makeTensor(values, shape, dtype, this) as Tensor<R>;\n    } else {\n      const program = new FillProgram(shape, value as number);\n      const customSetup = program.getCustomSetupFunc(value as number);\n      return this.compileAndRun(program, [], dtype, customSetup);\n    }\n  }\n\n  onesLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    if (x.dtype === 'string') {\n      throw new Error('onesLike is not supported under string dtype');\n    } else {\n      // TODO(cais, smilkov): Add WebGL shader for onesLike:\n      //   https://github.com/tensorflow/tfjs/issues/1293\n      return this.fill(x.shape, 1, x.dtype);\n    }\n  }\n\n  zerosLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    return this.fill(x.shape, x.dtype === 'string' ? '' : 0, x.dtype);\n  }\n\n  linspace(start: number, stop: number, num: number): Tensor1D {\n    // TODO: Use CPU implementation due to the precision problem in Safari.\n    return backend_util.linspaceImpl(start, stop, num);\n  }\n\n  makeTensorInfo(shape: number[], dtype: DataType): TensorInfo {\n    const dataId = this.write(null /* values */, shape, dtype);\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(shape: number[], dtype: DataType): T {\n    const {dataId} = this.makeTensorInfo(shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  private unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  private packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId): TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype,\n        null /* customSetup */, preventEagerUnpackingOfOutput);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(\n        this.gpgpu, binary, inputsData, outputData, customSetup);\n\n    dataToDispose.forEach(info => this.disposeData(info.dataId));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeData(output.dataId);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun<K extends TensorInfo>(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): K {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customSetup,\n        preventEagerUnpackingOfOutput);\n    return engine().makeTensorFromDataId(\n               outInfo.dataId, outInfo.shape, outInfo.dtype) as {} as K;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  private uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(\n            shapeAs3D, [height, width], isByteArray);\n      } else {\n        program =\n            new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.UPLOAD;\n      }\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      this.disposeData(tempDenseInputHandle.dataId);\n      this.texData.delete(encodedOutputTarget.dataId);\n\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): WebGLTexture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Div, DivInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {divImpl} from './Div_impl';\n\nexport const divConfig: KernelConfig = {\n  kernelName: Div,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {a, b} = inputs as DivInputs;\n\n    const webglBackend = backend as MathBackendWebGL;\n\n    return divImpl(a, b, webglBackend);\n  }\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as {} as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement, 0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {TensorInfo} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_gpu from '../binaryop_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport * as binaryop_packed_gpu from '../binaryop_packed_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport function divImpl(\n    a: TensorInfo, b: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  let program = new BinaryOpProgram(binaryop_gpu.DIV, a.shape, b.shape);\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(\n        binaryop_packed_gpu.DIV, a.shape, b.shape, true);\n  }\n  const output = backend.runWebGLProgram(program, [a, b], 'float32');\n  return output;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { engine, env } from '@tensorflow/tfjs-core';\nimport { backend_util, buffer, slice_util, util } from '@tensorflow/tfjs-core';\nimport { DataStorage, KernelBackend, max, TensorBuffer, upcastType } from '@tensorflow/tfjs-core';\nimport { kernel_impls } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV3 = kernel_impls.nonMaxSuppressionV3;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\nimport * as seedrandom from 'seedrandom';\nimport { assertNotComplex } from './cpu_util';\nimport { maxPoolPositions, pool } from './utils/pool_utils';\nfunction mapActivation(backend, x, activation, preluActivationWeights) {\n    if (activation === 'linear') {\n        return backend.linear(x);\n    }\n    else if (activation === 'relu') {\n        return backend.relu(x);\n    }\n    else if (activation === 'elu') {\n        return backend.elu(x);\n    }\n    else if (activation === 'relu6') {\n        return backend.relu6(x);\n    }\n    else if (activation === 'prelu') {\n        return backend.prelu(x, preluActivationWeights);\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the CPU backend.`);\n}\nexport class MathBackendCPU extends KernelBackend {\n    constructor() {\n        super();\n        this.blockSize = 48;\n        this.firstUse = true;\n        this.data = new DataStorage(this, engine());\n    }\n    write(values, shape, dtype) {\n        if (this.firstUse) {\n            this.firstUse = false;\n            if (env().get('IS_NODE')) {\n                backend_util.warn('\\n============================\\n' +\n                    'Hi there 👋. Looks like you are running TensorFlow.js in ' +\n                    'Node.js. To speed things up dramatically, install our node ' +\n                    'backend, which binds to TensorFlow C++, by running ' +\n                    'npm i @tensorflow/tfjs-node, ' +\n                    'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n                    'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n                    'suffix for CUDA) at the start of your program. ' +\n                    'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n                    '\\n============================');\n            }\n        }\n        const dataId = {};\n        this.data.set(dataId, { values, dtype });\n        return dataId;\n    }\n    move(dataId, values, shape, dtype) {\n        this.data.set(dataId, { values, dtype });\n    }\n    numDataIds() {\n        return this.data.numDataIds();\n    }\n    async read(dataId) {\n        return this.readSync(dataId);\n    }\n    readSync(dataId) {\n        const { dtype, complexTensors } = this.data.get(dataId);\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensors.real.dataId);\n            const imagValues = this.readSync(complexTensors.imag.dataId);\n            return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        return this.data.get(dataId).values;\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        let decodedData = data;\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                decodedData = data.map(d => util.decodeString(d));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return tf.buffer(t.shape, t.dtype, decodedData);\n    }\n    makeOutput(values, shape, dtype) {\n        const dataId = this.write(values, shape, dtype);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    disposeData(dataId) {\n        if (this.data.has(dataId)) {\n            const { complexTensors } = this.data.get(dataId);\n            if (complexTensors != null) {\n                complexTensors.real.dispose();\n                complexTensors.imag.dispose();\n            }\n            this.data.delete(dataId);\n        }\n    }\n    async time(f) {\n        const start = util.now();\n        f();\n        const kernelMs = util.now() - start;\n        return { kernelMs };\n    }\n    memory() {\n        return {\n            // Unreliable due to automatic gc. The numbers above are cumulative.\n            unreliable: true,\n            reasons: ['The reported memory is an upper bound. Due to automatic garbage ' +\n                    'collection, the true allocated memory may be less.']\n        };\n    }\n    complex(real, imag) {\n        const result = this.makeOutput(null, real.shape, 'complex64');\n        const resultData = this.data.get(result.dataId);\n        // The backend owns the reference to the underlying real and imaginary\n        // clones. These will explicitly get disposed when the complex tensor is\n        // disposed.\n        resultData.complexTensors = {\n            real: engine().keep(real.clone()),\n            imag: engine().keep(imag.clone())\n        };\n        return result;\n    }\n    real(input) {\n        const resultData = this.data.get(input.dataId);\n        return resultData.complexTensors.real.clone();\n    }\n    imag(input) {\n        const resultData = this.data.get(input.dataId);\n        return resultData.complexTensors.imag.clone();\n    }\n    slice(x, begin, size) {\n        assertNotComplex(x, 'slice');\n        const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n        if (isContinous) {\n            const flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n            const length = util.sizeFromShape(size);\n            const vals = this.readSync(x.dataId);\n            return tf.tensor(vals.subarray(flatOffset, flatOffset + length), size, x.dtype);\n        }\n        const buffer = tf.buffer(size, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < buffer.size; ++i) {\n            const loc = buffer.indexToLoc(i);\n            const xLoc = loc.map((idx, j) => idx + begin[j]);\n            buffer.values[i] = xBuf.get(...xLoc);\n        }\n        return buffer.toTensor();\n    }\n    stridedSlice(x, begin, end, strides) {\n        assertNotComplex(x, 'stridedSlice');\n        const outShape = slice_util.computeOutShape(begin, end, strides);\n        if (outShape.some(axis => axis === 0)) {\n            return tf.tensor([], outShape);\n        }\n        const buffer = tf.buffer(outShape, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < buffer.size; i++) {\n            const loc = buffer.indexToLoc(i);\n            const newLoc = new Array(loc.length);\n            for (let j = 0; j < newLoc.length; j++) {\n                newLoc[j] = loc[j] * strides[j] + begin[j];\n            }\n            buffer.set(xBuf.get(...newLoc), ...loc);\n        }\n        return buffer.toTensor();\n    }\n    diag(x) {\n        const xVals = this.readSync(x.dataId);\n        const buffer = tf.buffer([x.size, x.size], x.dtype);\n        const vals = buffer.values;\n        for (let i = 0; i < xVals.length; i++) {\n            vals[i * x.size + i] = xVals[i];\n        }\n        return buffer.toTensor();\n    }\n    unstack(x, axis) {\n        const num = x.shape[axis];\n        const outShape = new Array(x.rank - 1);\n        let outIndex = 0;\n        for (let i = 0; i < x.rank; i++) {\n            if (i !== axis) {\n                outShape[outIndex++] = x.shape[i];\n            }\n        }\n        const begin = new Array(x.rank).fill(0);\n        const size = x.shape.slice();\n        size[axis] = 1;\n        const res = new Array(num);\n        for (let i = 0; i < res.length; i++) {\n            begin[axis] = i;\n            res[i] = this.slice(x, begin, size).reshape(outShape);\n        }\n        return res;\n    }\n    reverse(x, axis) {\n        assertNotComplex(x, 'reverse');\n        const buffer = tf.buffer(x.shape, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < buffer.size; i++) {\n            const outLoc = buffer.indexToLoc(i);\n            const inLoc = outLoc.slice();\n            axis.forEach(ax => inLoc[ax] = x.shape[ax] - 1 - inLoc[ax]);\n            buffer.set(xBuf.get(...inLoc), ...outLoc);\n        }\n        return buffer.toTensor();\n    }\n    concat(tensors, axis) {\n        if (tensors[0].dtype === 'complex64') {\n            const reals = tensors.map((t) => tf.real(t));\n            const imags = tensors.map((t) => tf.imag(t));\n            return tf.complex(this.concat(reals, axis), this.concat(imags, axis));\n        }\n        const tensors2D = tensors.map(t => {\n            const innerSize = util.sizeFromShape(t.shape.slice(axis));\n            return t.as2D(-1, innerSize);\n        });\n        const outShape = backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis\n          */);\n        const values = tf.buffer(outShape, tensors[0].dtype)\n            .values;\n        if (tensors2D[0].shape[0] === 1) {\n            // Use built-in TypedArray.set() method for speed.\n            let offset = 0;\n            tensors2D.forEach(t => {\n                values.set(this.readSync(t.dataId), offset);\n                offset += t.size;\n            });\n        }\n        else {\n            let colOffset = 0;\n            tensors2D.forEach(t => {\n                const tVals = this.readSync(t.dataId);\n                let tIdx = 0;\n                for (let row = 0; row < t.shape[0]; ++row) {\n                    const resIdx = row * outShape[1] + colOffset;\n                    for (let col = 0; col < t.shape[1]; ++col) {\n                        values[resIdx + col] = tVals[tIdx++];\n                    }\n                }\n                colOffset += t.shape[1];\n            });\n        }\n        const finalOutShape = backend_util.computeOutShape(tensors.map(t => t.shape), axis);\n        return tf.tensor(values, finalOutShape, tensors[0].dtype);\n    }\n    neg(x) {\n        assertNotComplex(x, 'neg');\n        return this.multiply(tf.scalar(-1), x);\n    }\n    add(a, b) {\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            return this.broadcastedBinaryComplexOp(a.cast('complex64'), b.cast('complex64'), (aReal, aImag, bReal, bImag) => {\n                return { real: aReal + bReal, imag: aImag + bImag };\n            });\n        }\n        return this.broadcastedBinaryOp(a, b, upcastType(a.dtype, b.dtype), (aValue, bValue) => aValue + bValue);\n    }\n    addN(tensors) {\n        assertNotComplex(tensors, 'addN');\n        const vals = tensors.map(t => this.readSync(t.dataId));\n        const result = tf.buffer(tensors[0].shape, tensors[0].dtype);\n        const resultVals = result.values;\n        for (let i = 0; i < tensors.length; i++) {\n            const currVals = vals[i];\n            for (let j = 0; j < resultVals.length; j++) {\n                resultVals[j] += currVals[j];\n            }\n        }\n        return result.toTensor();\n    }\n    softmax(logits, dim) {\n        const axes = util.parseAxisParam([dim], logits.shape);\n        // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n        // modularization.\n        const maxLogit = max(logits, axes);\n        const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n        const a = this.subtract(logits, maxLogit.reshape(expandedShape));\n        const b = this.exp(a);\n        const sumExp = this.sum(b, axes).reshape(expandedShape);\n        // TODO(annxingyuan): Call divImpl rather than op as part of softmax\n        // kernel modularization.\n        return tf.div(b, sumExp);\n    }\n    subtract(a, b) {\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            return this.broadcastedBinaryComplexOp(a.cast('complex64'), b.cast('complex64'), (aReal, aImag, bReal, bImag) => {\n                return { real: aReal - bReal, imag: aImag - bImag };\n            });\n        }\n        return this.broadcastedBinaryOp(a, b, upcastType(a.dtype, b.dtype), (aValue, bValue) => aValue - bValue);\n    }\n    pow(a, b) {\n        assertNotComplex([a, b], 'pow');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aValue, bValue) => Math.pow(aValue, bValue));\n    }\n    batchMatMul(a, b, transposeA, transposeB) {\n        assertNotComplex([a, b], 'matMul');\n        const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n        const leftDim = transposeA ? a.shape[2] : a.shape[1];\n        const rightDim = transposeB ? b.shape[1] : b.shape[2];\n        const batchDim = a.shape[0];\n        const aValues = this.readSync(a.dataId);\n        const bValues = this.readSync(b.dataId);\n        const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n            [a.strides[0], 1, a.strides[1]] :\n            [a.strides[0], a.strides[1], 1];\n        const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n            [1, b.strides[1], b.strides[0]] :\n            [b.strides[1], 1, b.strides[0]];\n        const size = leftDim * rightDim;\n        const result = tf.buffer([batchDim, leftDim, rightDim], a.dtype);\n        const resVals = result.values;\n        const blockSize = this.blockSize;\n        for (let b = 0; b < batchDim; b++) {\n            for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n                for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n                    for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n                        // for when blockSize doesn't evenly divide the input\n                        const iBlock = Math.min(i0 + blockSize, leftDim);\n                        const jBlock = Math.min(j0 + blockSize, rightDim);\n                        const kBlock = Math.min(k0 + blockSize, sharedDim);\n                        for (let i = i0; i < iBlock; i++) {\n                            for (let j = j0; j < jBlock; j++) {\n                                let sum = 0.0;\n                                for (let k = k0; k < kBlock; k++) {\n                                    sum += aValues[b * aBatch + i * aOuterStep + k * aInnerStep] *\n                                        bValues[k * bInnerStep + j * bOuterStep + b * bBatch];\n                                }\n                                resVals[b * size + (i * rightDim + j)] += sum;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result.toTensor();\n    }\n    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {\n        let result = this.batchMatMul(a, b, transposeA, transposeB);\n        if (bias) {\n            result = this.add(result, bias);\n        }\n        if (activation) {\n            result =\n                mapActivation(this, result, activation, preluActivationWeights);\n        }\n        return result;\n    }\n    multiply(a, b) {\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            return this.broadcastedBinaryComplexOp(a.cast('complex64'), b.cast('complex64'), (aReal, aImag, bReal, bImag) => {\n                return {\n                    real: aReal * bReal - aImag * bImag,\n                    imag: aReal * bImag + aImag * bReal\n                };\n            });\n        }\n        return this.broadcastedBinaryOp(a, b, upcastType(a.dtype, b.dtype), (aValue, bValue) => aValue * bValue);\n    }\n    floorDiv(a, b) {\n        assertNotComplex([a, b], 'floorDiv');\n        const op = (a, b) => Math.floor(a / b);\n        const outputDtype = 'int32';\n        return this.broadcastedBinaryOp(a, b, outputDtype, op);\n    }\n    sum(x, axes) {\n        assertNotComplex(x, 'sum');\n        backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const resultDtype = upcastType(x.dtype, 'int32');\n        const result = tf.zeros(outShape, resultDtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let sum = 0;\n            for (let j = 0; j < reduceSize; ++j) {\n                sum += aVals[offset + j];\n            }\n            vals[i] = sum;\n        }\n        return result;\n    }\n    prod(x, axes) {\n        assertNotComplex(x, 'sum');\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const resultDtype = upcastType(x.dtype, 'int32');\n        const result = tf.zeros(outShape, resultDtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let prod = 1;\n            for (let j = 0; j < reduceSize; ++j) {\n                prod *= aVals[offset + j];\n            }\n            vals[i] = prod;\n        }\n        return result;\n    }\n    unsortedSegmentSum(x, segmentIds, numSegments) {\n        assertNotComplex(x, 'unsortedSegmentSum');\n        const res = [];\n        // Reshape the segment id's so that they can be broadcast with\n        // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n        const numIters = x.rank - segmentIds.rank;\n        for (let i = 0; i < numIters; ++i) {\n            segmentIds = segmentIds.expandDims(i + 1);\n        }\n        for (let i = 0; i < numSegments; ++i) {\n            const segmentId = tf.scalar(i, 'int32');\n            const mask = tf.equal(segmentId, segmentIds).asType('float32');\n            const sum = mask.mul(x).sum(0);\n            res.push(sum);\n        }\n        return tf.stack(res);\n    }\n    argMin(x, axis) {\n        assertNotComplex(x, 'argMin');\n        const axes = [axis];\n        backend_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, 'int32');\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let min = aVals[offset];\n            let minIndex = 0;\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                if (value < min) {\n                    min = value;\n                    minIndex = j;\n                }\n            }\n            vals[i] = minIndex;\n        }\n        return result;\n    }\n    argMax(x, axis) {\n        assertNotComplex(x, 'argMax');\n        const axes = [axis];\n        backend_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, 'int32');\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let max = aVals[offset];\n            let maxIndex = 0;\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                if (value > max) {\n                    max = value;\n                    maxIndex = j;\n                }\n            }\n            vals[i] = maxIndex;\n        }\n        return result;\n    }\n    cumsum(x, axis, exclusive, reverse) {\n        assertNotComplex(x, 'cumsum');\n        if (axis !== x.rank - 1) {\n            throw new Error(`backend.cumsum in CPU expects an inner-most axis=${x.rank - 1} ` +\n                `but got axis=${axis}`);\n        }\n        const resultDtype = upcastType(x.dtype, 'int32');\n        const result = tf.zeros(x.shape, resultDtype);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        const finalDim = x.shape[x.rank - 1];\n        const indexAdjuster = reverse ?\n            (i, j) => i + finalDim - j - 1 :\n            (i, j) => i + j;\n        for (let i = 0; i < aVals.length; i += finalDim) {\n            for (let j = 0; j < finalDim; j++) {\n                const idx = indexAdjuster(i, j);\n                if (j === 0) {\n                    vals[idx] = exclusive ? 0 : aVals[idx];\n                }\n                else {\n                    const prevIdx = indexAdjuster(i, j - 1);\n                    vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                        aVals[idx] + vals[prevIdx];\n                }\n            }\n        }\n        return result;\n    }\n    equal(a, b) {\n        assertNotComplex([a, b], 'equal');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal === bVal) ? 1 : 0;\n        });\n    }\n    notEqual(a, b) {\n        assertNotComplex([a, b], 'notEqual');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal !== bVal) ? 1 : 0;\n        });\n    }\n    less(a, b) {\n        assertNotComplex([a, b], 'less');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal < bVal) ? 1 : 0;\n        });\n    }\n    lessEqual(a, b) {\n        assertNotComplex([a, b], 'lessEqual');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal <= bVal) ? 1 : 0;\n        });\n    }\n    greater(a, b) {\n        assertNotComplex([a, b], 'greater');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal > bVal) ? 1 : 0;\n        });\n    }\n    greaterEqual(a, b) {\n        assertNotComplex([a, b], 'greaterEqual');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal >= bVal) ? 1 : 0;\n        });\n    }\n    logicalNot(x) {\n        assertNotComplex(x, 'logicalNot');\n        const values = this.readSync(x.dataId);\n        const newValues = new Uint8Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = values[i] ? 0 : 1;\n        }\n        return this.makeOutput(newValues, x.shape, 'bool');\n    }\n    logicalAnd(a, b) {\n        assertNotComplex([a, b], 'logicalAnd');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return aVal && bVal;\n        });\n    }\n    logicalOr(a, b) {\n        assertNotComplex([a, b], 'logicalOr');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return aVal || bVal;\n        });\n    }\n    select(condition, a, b) {\n        assertNotComplex([condition, a, b], 'select');\n        const values = this.readSync(condition.dataId);\n        const aValues = this.readSync(a.dataId);\n        const bValues = this.readSync(b.dataId);\n        const result = tf.zeros(a.shape, upcastType(a.dtype, b.dtype));\n        const newValues = this.readSync(result.dataId);\n        let index = 0;\n        const offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ?\n            1 :\n            util.sizeFromShape(a.shape.slice(1));\n        for (let i = 0; i < values.length; i++) {\n            for (let j = 0; j < offset; j++) {\n                if (values[i] === 1) {\n                    newValues[index++] = aValues[i];\n                }\n                else {\n                    newValues[index++] = bValues[i];\n                }\n            }\n        }\n        return result;\n    }\n    where(condition) {\n        assertNotComplex([condition], 'where');\n        const condVals = this.readSync(condition.dataId);\n        return whereImpl(condition.shape, condVals);\n    }\n    topk(x, k, sorted) {\n        assertNotComplex(x, 'topk');\n        const xVals = this.readSync(x.dataId);\n        return topkImpl(xVals, x.shape, x.dtype, k, sorted);\n    }\n    min(x, axes) {\n        assertNotComplex(x, 'min');\n        backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, x.dtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let min = aVals[offset];\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                if (value < min) {\n                    min = value;\n                }\n            }\n            vals[i] = min;\n        }\n        return result;\n    }\n    minimum(a, b) {\n        assertNotComplex([a, b], 'minimum');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => Math.min(aVal, bVal));\n    }\n    mod(a, b) {\n        assertNotComplex([a, b], 'mod');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n            const rem = aVal % bVal;\n            if ((aVal < 0 && bVal < 0) || (aVal >= 0 && bVal >= 0)) {\n                return rem;\n            }\n            else {\n                return (rem + bVal) % bVal;\n            }\n        });\n    }\n    maximum(a, b) {\n        assertNotComplex([a, b], 'maximum');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => Math.max(aVal, bVal));\n    }\n    all(x, axes) {\n        assertNotComplex(x, 'all');\n        backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, x.dtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let all = aVals[offset];\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                all = all && value;\n            }\n            vals[i] = all;\n        }\n        return result;\n    }\n    any(x, axes) {\n        assertNotComplex(x, 'any');\n        backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, x.dtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let anyVal = aVals[offset];\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                anyVal = anyVal || value;\n            }\n            vals[i] = anyVal;\n        }\n        return result;\n    }\n    squaredDifference(a, b) {\n        assertNotComplex([a, b], 'squaredDifference');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n            const diff = aVal - bVal;\n            return diff * diff;\n        });\n    }\n    ceil(x) {\n        assertNotComplex(x, 'ceil');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = Math.ceil(values[i]);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    floor(x) {\n        assertNotComplex(x, 'floor');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = Math.floor(values[i]);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    sign(x) {\n        assertNotComplex(x, 'x');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            if (values[i] < 0) {\n                newValues[i] = -1;\n            }\n            else if (values[i] > 0) {\n                newValues[i] = 1;\n            }\n            else {\n                newValues[i] = 0;\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    isNaN(x) {\n        assertNotComplex(x, 'x');\n        const values = this.readSync(x.dataId);\n        const newValues = new Uint8Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            if (Number.isNaN(values[i])) {\n                newValues[i] = 1;\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'bool');\n    }\n    isInf(x) {\n        assertNotComplex(x, 'x');\n        const values = this.readSync(x.dataId);\n        const newValues = new Uint8Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            if (Math.abs(values[i]) === Infinity) {\n                newValues[i] = 1;\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'bool');\n    }\n    isFinite(x) {\n        assertNotComplex(x, 'x');\n        const values = this.readSync(x.dataId);\n        const newValues = new Uint8Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            if (Number.isFinite(values[i])) {\n                newValues[i] = 1;\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'bool');\n    }\n    round(x) {\n        assertNotComplex(x, 'round');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            // The algorithm is based on banker's rounding.\n            const base = Math.floor(values[i]);\n            if (values[i] - base < 0.5) {\n                newValues[i] = Math.floor(values[i]);\n            }\n            else if (values[i] - base > 0.5) {\n                newValues[i] = Math.ceil(values[i]);\n            }\n            else {\n                if (base % 2.0 === 0.0) {\n                    newValues[i] = base;\n                }\n                else {\n                    newValues[i] = base + 1.0;\n                }\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    exp(x) {\n        assertNotComplex(x, 'exp');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = Math.exp(values[i]);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    expm1(x) {\n        assertNotComplex(x, 'expm1');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = Math.expm1(values[i]);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    log(x) {\n        assertNotComplex(x, 'log');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = Math.log(value);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    log1p(x) {\n        assertNotComplex(x, 'log1p');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = Math.log1p(value);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    sqrt(x) {\n        assertNotComplex(x, 'sqrt');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = Math.sqrt(value);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    rsqrt(x) {\n        assertNotComplex(x, 'rsqrt');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = 1 / Math.sqrt(value);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    reciprocal(x) {\n        assertNotComplex(x, 'reciprocal');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = 1 / values[i];\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    linear(x) {\n        return x;\n    }\n    relu(x) {\n        assertNotComplex(x, 'relu');\n        const res = tf.zeros(x.shape, x.dtype);\n        const resVals = this.readSync(res.dataId);\n        const inVals = this.readSync(x.dataId);\n        for (let i = 0; i < inVals.length; ++i) {\n            resVals[i] = Math.max(0, inVals[i]);\n        }\n        return res;\n    }\n    relu6(x) {\n        assertNotComplex(x, 'relu');\n        const res = tf.zeros(x.shape, x.dtype);\n        const resVals = this.readSync(res.dataId);\n        const inVals = this.readSync(x.dataId);\n        for (let i = 0; i < inVals.length; ++i) {\n            resVals[i] = Math.min(Math.max(0, inVals[i]), 6);\n        }\n        return res;\n    }\n    prelu(x, a) {\n        assertNotComplex([x, a], 'prelu');\n        return this.broadcastedBinaryOp(x, a, x.dtype, (xValue, aValue) => xValue < 0 ? aValue * xValue : xValue);\n    }\n    elu(x) {\n        assertNotComplex(x, 'elu');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const v = values[i];\n            if (v >= 0) {\n                resultValues[i] = v;\n            }\n            else {\n                resultValues[i] = (Math.exp(v) - 1);\n            }\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    eluDer(dy, y) {\n        assertNotComplex([dy, y], 'eluDer');\n        const resultValues = new Float32Array(y.size);\n        const values = this.readSync(y.dataId);\n        const dyValues = this.readSync(dy.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const v = values[i];\n            if (v >= 1) {\n                resultValues[i] = dyValues[i];\n            }\n            else {\n                resultValues[i] = dyValues[i] * (v + 1);\n            }\n        }\n        return this.makeOutput(resultValues, y.shape, 'float32');\n    }\n    selu(x) {\n        assertNotComplex(x, 'selu');\n        // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n        // see: https://arxiv.org/abs/1706.02515\n        const scaleAlpha = backend_util.SELU_SCALEALPHA;\n        const scale = backend_util.SELU_SCALE;\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const v = values[i];\n            if (v >= 0) {\n                resultValues[i] = scale * v;\n            }\n            else {\n                resultValues[i] = scaleAlpha * (Math.exp(v) - 1);\n            }\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    clip(x, min, max) {\n        assertNotComplex(x, 'clip');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const v = values[i];\n            resultValues[i] = v > max ? max : (v < min ? min : v);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    abs(x) {\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.abs(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    complexAbs(x) {\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < x.size; ++i) {\n            const real = values[i * 2];\n            const imag = values[i * 2 + 1];\n            resultValues[i] = Math.hypot(real, imag);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    int(x) {\n        assertNotComplex(x, 'int');\n        const resultValues = new Int32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = values[i];\n        }\n        return this.makeOutput(resultValues, x.shape, 'int32');\n    }\n    sigmoid(x) {\n        assertNotComplex(x, 'sigmoid');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = 1 / (1 + Math.exp(-values[i]));\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    softplus(x) {\n        assertNotComplex(x, 'softplus');\n        // mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n        // epsilon is the difference between 1.0 and the next representable float.\n        // For a single precision 32 bit float this should be 2^-23, see:\n        // https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n        const epsilon = 1.1920928955078125e-7;\n        const threshold = Math.log(epsilon) + 2.0;\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            // Value above which exp(x) may overflow, but softplus(x) == x\n            // is within machine epsilon.\n            const tooLarge = values[i] > -threshold;\n            // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n            // is within machine epsilon.\n            const tooSmall = values[i] < threshold;\n            const expX = Math.exp(values[i]);\n            let result;\n            if (tooSmall) {\n                result = expX;\n            }\n            else if (tooLarge) {\n                result = values[i];\n            }\n            else {\n                result = Math.log(1.0 + expX);\n            }\n            resultValues[i] = result;\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    sin(x) {\n        assertNotComplex(x, 'sin');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.sin(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    cos(x) {\n        assertNotComplex(x, 'cos');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.cos(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    tan(x) {\n        assertNotComplex(x, 'tan');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.tan(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    asin(x) {\n        assertNotComplex(x, 'asin');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.asin(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    acos(x) {\n        assertNotComplex(x, 'acos');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.acos(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    atan(x) {\n        assertNotComplex(x, 'atan');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.atan(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    atan2(a, b) {\n        assertNotComplex([a, b], 'atan2');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aValue, bValue) => Math.atan2(aValue, bValue));\n    }\n    sinh(x) {\n        assertNotComplex(x, 'sinh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.sinh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    cosh(x) {\n        assertNotComplex(x, 'cosh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.cosh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    tanh(x) {\n        assertNotComplex(x, 'tanh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = util.tanh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    asinh(x) {\n        assertNotComplex(x, 'asinh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.asinh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    acosh(x) {\n        assertNotComplex(x, 'acosh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.acosh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    atanh(x) {\n        assertNotComplex(x, 'atanh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.atanh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    erf(x) {\n        assertNotComplex(x, 'erf');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        const p = backend_util.ERF_P;\n        const a1 = backend_util.ERF_A1;\n        const a2 = backend_util.ERF_A2;\n        const a3 = backend_util.ERF_A3;\n        const a4 = backend_util.ERF_A4;\n        const a5 = backend_util.ERF_A5;\n        for (let i = 0; i < values.length; ++i) {\n            const sign = Math.sign(values[i]);\n            const v = Math.abs(values[i]);\n            const t = 1.0 / (1.0 + p * v);\n            resultValues[i] = sign *\n                (1.0 -\n                    (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n                        Math.exp(-v * v));\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    step(x, alpha = 0) {\n        assertNotComplex(x, 'step');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            if (isNaN(value)) {\n                resultValues[i] = NaN;\n            }\n            else {\n                resultValues[i] = value > 0 ? 1 : alpha;\n            }\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        let result = this.conv2d(input, filter, convInfo);\n        if (bias) {\n            result = this.add(result, bias);\n        }\n        if (activation) {\n            result =\n                mapActivation(this, result, activation, preluActivationWeights);\n        }\n        return result;\n    }\n    conv2d(x, filter, convInfo) {\n        assertNotComplex([x, filter], 'conv2d');\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const padLeft = convInfo.padInfo.left;\n        const padTop = convInfo.padInfo.top;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const y = tf.buffer(convInfo.outShape, x.dtype);\n        const xBatchStride = x.strides[0];\n        const xRowStride = isChannelsLast ? x.strides[1] : x.strides[2];\n        const xColStride = isChannelsLast ? x.strides[2] : 1;\n        const xChannelStride = isChannelsLast ? 1 : x.strides[1];\n        const yBatchStride = y.strides[0];\n        const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n        const yColStride = isChannelsLast ? y.strides[2] : 1;\n        const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n        const xVals = this.readSync(x.dataId);\n        const wVals = this.readSync(filter.dataId);\n        const yVals = y.values;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            const xOffset1 = b * xBatchStride;\n            const yOffset1 = b * yBatchStride;\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const yOffset2 = yOffset1 + yR * yRowStride;\n                const xRCorner = yR * convInfo.strideHeight - padTop;\n                for (let wR = 0; wR < filterHeight; wR++) {\n                    const xR = xRCorner + wR * dilationHeight;\n                    if (xR < 0 || xR >= convInfo.inHeight) {\n                        continue;\n                    }\n                    const wOffset1 = wR * filter.strides[0];\n                    const xOffset2 = xOffset1 + xR * xRowStride;\n                    for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                        const yOffset3 = yOffset2 + yC * yColStride;\n                        const xCCorner = yC * convInfo.strideWidth - padLeft;\n                        for (let wC = 0; wC < filterWidth; wC++) {\n                            const xC = xCCorner + wC * dilationWidth;\n                            if (xC < 0 || xC >= convInfo.inWidth) {\n                                continue;\n                            }\n                            const wOffset2 = wOffset1 + wC * filter.strides[1];\n                            const xOffset3 = xOffset2 + xC * xColStride;\n                            let wOffset3 = wOffset2;\n                            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                const xVal = xVals[xOffset3 + d1 * xChannelStride];\n                                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                    yVals[yOffset3 + d2 * yChannelStride] +=\n                                        xVal * wVals[wOffset3 + d2];\n                                }\n                                wOffset3 += convInfo.outChannels;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    }\n    conv3d(x, filter, convInfo) {\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const padFront = convInfo.padInfo.front;\n        const padLeft = convInfo.padInfo.left;\n        const padTop = convInfo.padInfo.top;\n        const y = tf.buffer(convInfo.outShape, x.dtype);\n        const xVals = this.readSync(x.dataId);\n        const wVals = this.readSync(filter.dataId);\n        const yVals = y.values;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            const xOffset1 = b * x.strides[0];\n            const yOffset1 = b * y.strides[0];\n            for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n                const yOffset2 = yOffset1 + yF * y.strides[1];\n                const xFCorner = yF * convInfo.strideDepth - padFront;\n                for (let wF = 0; wF < filterDepth; wF++) {\n                    const xF = xFCorner + wF * dilationDepth;\n                    if (xF < 0 || xF >= convInfo.inDepth) {\n                        continue;\n                    }\n                    const wOffset1 = wF * filter.strides[0];\n                    const xOffset2 = xOffset1 + xF * x.strides[1];\n                    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                        const yOffset3 = yOffset2 + yR * y.strides[2];\n                        const xRCorner = yR * convInfo.strideHeight - padTop;\n                        for (let wR = 0; wR < filterHeight; wR++) {\n                            const xR = xRCorner + wR * dilationHeight;\n                            if (xR < 0 || xR >= convInfo.inHeight) {\n                                continue;\n                            }\n                            const wOffset2 = wOffset1 + wR * filter.strides[1];\n                            const xOffset3 = xOffset2 + xR * x.strides[2];\n                            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                                const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                                const xCCorner = yC * convInfo.strideWidth - padLeft;\n                                for (let wC = 0; wC < filterWidth; wC++) {\n                                    const xC = xCCorner + wC * dilationWidth;\n                                    if (xC < 0 || xC >= convInfo.inWidth) {\n                                        continue;\n                                    }\n                                    const wOffset3 = wOffset2 + wC * filter.strides[2];\n                                    const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                                    let wOffset4 = wOffset3;\n                                    for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                        const xVal = xVals[xOffset4 + d1];\n                                        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                            yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                                        }\n                                        wOffset4 += convInfo.outChannels;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    }\n    conv2dDerInput(dy, filter, convInfo) {\n        assertNotComplex([dy, filter], 'conv2dDerInput');\n        const dx = tf.buffer(convInfo.inShape, 'float32');\n        const dxValues = dx.values;\n        const dyValues = this.readSync(dy.dataId);\n        const fltValues = this.readSync(filter.dataId);\n        const [fltS0, fltS1, fltS2] = filter.strides;\n        const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth, dataFormat } = convInfo;\n        const topPad = filterHeight - 1 - convInfo.padInfo.top;\n        const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const xBatchStride = dx.strides[0];\n        const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n        const xColStride = isChannelsLast ? dx.strides[2] : 1;\n        const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n        const yBatchStride = dy.strides[0];\n        const yRowStride = isChannelsLast ? dy.strides[1] : dy.strides[2];\n        const yColStride = isChannelsLast ? dy.strides[2] : 1;\n        const yChannelStride = isChannelsLast ? 1 : dy.strides[1];\n        for (let b = 0; b < batchSize; ++b) {\n            for (let d1 = 0; d1 < inChannels; ++d1) {\n                for (let xR = 0; xR < inHeight; ++xR) {\n                    const xRCorner = xR - topPad;\n                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                    for (let xC = 0; xC < inWidth; ++xC) {\n                        const xCCorner = xC - leftPad;\n                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                        let dotProd = 0;\n                        for (let yR = xRMin; yR < yRMax; ++yR) {\n                            const wR = yR * strideHeight - xRCorner;\n                            for (let yC = xCMin; yC < yCMax; ++yC) {\n                                const wC = yC * strideWidth - xCCorner;\n                                const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n                                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                                for (let d2 = 0; d2 < outChannels; ++d2) {\n                                    const pixel = dyValues[dyOffset + yChannelStride * d2];\n                                    const weight = fltValues[fltOffset + d2];\n                                    dotProd += pixel * weight;\n                                }\n                            }\n                        }\n                        const dxOffset = xBatchStride * b + xRowStride * xR +\n                            xColStride * xC + xChannelStride * d1;\n                        dxValues[dxOffset] = dotProd;\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    conv3dDerInput(dy, filter, convInfo) {\n        const dx = tf.buffer(convInfo.inShape, 'float32');\n        const dxValues = dx.values;\n        const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n        const dyValues = this.readSync(dy.dataId);\n        const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n        const fltValues = this.readSync(filter.dataId);\n        const [fltS0, fltS1, fltS2, fltS3] = filter.strides;\n        const { batchSize, filterDepth, filterHeight, filterWidth, inChannels, inDepth, inHeight, inWidth, outChannels, outDepth, outHeight, outWidth, strideDepth, strideHeight, strideWidth } = convInfo;\n        const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n        const topPad = filterHeight - 1 - convInfo.padInfo.top;\n        const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n        for (let b = 0; b < batchSize; ++b) {\n            for (let d1 = 0; d1 < inChannels; ++d1) {\n                // Frames of depth\n                for (let xF = 0; xF < inDepth; ++xF) {\n                    const xFCorner = xF - frontPad;\n                    const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n                    const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n                    // Rows as per standard 2d matrix notation\n                    for (let xR = 0; xR < inHeight; ++xR) {\n                        const xRCorner = xR - topPad;\n                        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                        // Columns as per standard 2d matrix notation\n                        for (let xC = 0; xC < inWidth; ++xC) {\n                            const xCCorner = xC - leftPad;\n                            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                            const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                            let dotProd = 0;\n                            for (let yF = xFMin; yF < yFMax; ++yF) {\n                                const wF = yF * strideDepth - xFCorner;\n                                for (let yR = xRMin; yR < yRMax; ++yR) {\n                                    const wR = yR * strideHeight - xRCorner;\n                                    for (let yC = xCMin; yC < yCMax; ++yC) {\n                                        const wC = yC * strideWidth - xCCorner;\n                                        const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                                        const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                                            fltS1 * (filterHeight - 1 - wR) +\n                                            fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n                                        for (let d2 = 0; d2 < outChannels; ++d2) {\n                                            const pixel = dyValues[dyOffset + d2];\n                                            const weight = fltValues[fltOffset + d2];\n                                            dotProd += pixel * weight;\n                                        }\n                                    }\n                                }\n                            }\n                            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                                dotProd;\n                        }\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    conv2dDerFilter(x, dy, convInfo) {\n        assertNotComplex([x, dy], 'conv2dDerFilter');\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const dW = tf.buffer(convInfo.filterShape, 'float32');\n        const leftPad = convInfo.padInfo.left;\n        const topPad = convInfo.padInfo.top;\n        const xBuf = this.bufferSync(x);\n        const dyBuf = this.bufferSync(dy);\n        for (let wR = 0; wR < filterHeight; ++wR) {\n            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n            for (let wC = 0; wC < filterWidth; ++wC) {\n                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                        // Need to convolve.\n                        let dotProd = 0;\n                        for (let b = 0; b < convInfo.batchSize; ++b) {\n                            for (let yR = yRMin; yR < yRMax; ++yR) {\n                                const xR = wR + yR * strideHeight - topPad;\n                                for (let yC = yCMin; yC < yCMax; ++yC) {\n                                    const xC = wC + yC * strideWidth - leftPad;\n                                    if (isChannelsLast) {\n                                        dotProd +=\n                                            xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                                    }\n                                    else {\n                                        dotProd +=\n                                            xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                                    }\n                                }\n                            }\n                        }\n                        dW.set(dotProd, wR, wC, d1, d2);\n                    }\n                }\n            }\n        }\n        return dW.toTensor();\n    }\n    conv3dDerFilter(x, dy, convInfo) {\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dw = tf.buffer(convInfo.filterShape, 'float32');\n        const dwValues = dw.values;\n        const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n        const dyValues = this.readSync(dy.dataId);\n        const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n        const xValues = this.readSync(x.dataId);\n        const [xS0, xS1, xS2, xS3] = x.strides;\n        const frontPad = convInfo.padInfo.front;\n        const leftPad = convInfo.padInfo.left;\n        const topPad = convInfo.padInfo.top;\n        for (let wF = 0; wF < filterDepth; ++wF) {\n            const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n            const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n            const wOffset1 = wF * dwS0;\n            for (let wR = 0; wR < filterHeight; ++wR) {\n                const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n                const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n                const wOffset2 = wR * dwS1 + wOffset1;\n                for (let wC = 0; wC < filterWidth; ++wC) {\n                    const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                    const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                    const wOffset3 = wC * dwS2 + wOffset2;\n                    for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                        const wOffset4 = d1 * dwS3 + wOffset3;\n                        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                            let dotProd = 0;\n                            for (let b = 0; b < convInfo.batchSize; ++b) {\n                                const xOffset1 = b * xS0;\n                                const yOffset1 = b * dyS0;\n                                for (let yF = yFMin; yF < yFMax; ++yF) {\n                                    const xF = wF + yF * strideDepth - frontPad;\n                                    const xOffset2 = xF * xS1 + xOffset1;\n                                    const yOffset2 = yF * dyS1 + yOffset1;\n                                    for (let yR = yRMin; yR < yRMax; ++yR) {\n                                        const xR = wR + yR * strideHeight - topPad;\n                                        const xOffset3 = xR * xS2 + xOffset2;\n                                        const yOffset3 = yR * dyS2 + yOffset2;\n                                        for (let yC = yCMin; yC < yCMax; ++yC) {\n                                            const xC = wC + yC * strideWidth - leftPad;\n                                            const xOffset4 = xC * xS3 + xOffset3;\n                                            const yOffset4 = yC * dyS3 + yOffset3;\n                                            dotProd +=\n                                                xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                                        }\n                                    }\n                                }\n                            }\n                            dwValues[wOffset4 + d2] = dotProd;\n                        }\n                    }\n                }\n            }\n        }\n        return dw.toTensor();\n    }\n    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        let result = this.depthwiseConv2D(input, filter, convInfo);\n        if (bias) {\n            result = this.add(result, bias);\n        }\n        if (activation) {\n            result =\n                mapActivation(this, result, activation, preluActivationWeights);\n        }\n        return result;\n    }\n    depthwiseConv2D(x, filter, convInfo) {\n        assertNotComplex([x, filter], 'depthwiseConv2D');\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const padLeft = convInfo.padInfo.left;\n        const padTop = convInfo.padInfo.top;\n        const chMul = convInfo.outChannels / convInfo.inChannels;\n        const y = tf.buffer(convInfo.outShape, x.dtype);\n        const xVals = this.readSync(x.dataId);\n        const wVals = this.readSync(filter.dataId);\n        const yVals = y.values;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            const xOffset1 = b * x.strides[0];\n            const yOffset1 = b * y.strides[0];\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const yOffset2 = yOffset1 + yR * y.strides[1];\n                const xRCorner = yR * convInfo.strideHeight - padLeft;\n                for (let wR = 0; wR < filterHeight; ++wR) {\n                    const xR = xRCorner + wR * dilationHeight;\n                    if (xR < 0 || xR >= convInfo.inHeight) {\n                        continue;\n                    }\n                    const wOffset1 = wR * filter.strides[0];\n                    const xOffset2 = xOffset1 + xR * x.strides[1];\n                    for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                        const yOffset3 = yOffset2 + yC * y.strides[2];\n                        const xCCorner = yC * convInfo.strideWidth - padTop;\n                        for (let wC = 0; wC < filterWidth; ++wC) {\n                            const xC = xCCorner + wC * dilationWidth;\n                            if (xC < 0 || xC >= convInfo.inWidth) {\n                                continue;\n                            }\n                            const wOffset2 = wOffset1 + wC * filter.strides[1];\n                            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n                            let yOffset4 = yOffset3;\n                            let wOffset3 = wOffset2;\n                            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                const xVal = xVals[xOffset3 + d1];\n                                for (let q = 0; q < chMul; ++q) {\n                                    yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n                                }\n                                yOffset4 += chMul;\n                                wOffset3 += chMul;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    }\n    depthwiseConv2DDerInput(dy, filter, convInfo) {\n        assertNotComplex([dy, filter], 'depthwiseConv2DDerInput');\n        const dx = tf.buffer(convInfo.inShape, 'float32');\n        const dxValues = dx.values;\n        const [dxS0, dxS1, dxS2] = dx.strides;\n        const dyValues = this.readSync(dy.dataId);\n        const [dyS0, dyS1, dyS2] = dy.strides;\n        const fltValues = this.readSync(filter.dataId);\n        const [fltS0, fltS1, fltS2] = filter.strides;\n        const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n        const topPad = filterHeight - 1 - convInfo.padInfo.top;\n        const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n        const chMul = outChannels / inChannels;\n        for (let b = 0; b < batchSize; ++b) {\n            for (let d1 = 0; d1 < inChannels; ++d1) {\n                for (let xR = 0; xR < inHeight; ++xR) {\n                    const xRCorner = xR - topPad;\n                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                    for (let xC = 0; xC < inWidth; ++xC) {\n                        const xCCorner = xC - leftPad;\n                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                        let dotProd = 0;\n                        for (let yR = xRMin; yR < yRMax; ++yR) {\n                            const wR = yR * strideHeight - xRCorner;\n                            for (let yC = xCMin; yC < yCMax; ++yC) {\n                                const wC = yC * strideWidth - xCCorner;\n                                const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                                for (let dm = 0; dm < chMul; ++dm) {\n                                    const d2 = d1 * chMul + dm;\n                                    const pixel = dyValues[dyOffset + d2];\n                                    const weight = fltValues[fltOffset + dm];\n                                    dotProd += pixel * weight;\n                                }\n                            }\n                        }\n                        dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    depthwiseConv2DDerFilter(x, dy, convInfo) {\n        assertNotComplex([x, dy], 'depthwiseConv2DDerFilter');\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dW = tf.buffer(convInfo.filterShape, 'float32');\n        const leftPad = convInfo.padInfo.left;\n        const topPad = convInfo.padInfo.top;\n        const chMul = convInfo.outChannels / convInfo.inChannels;\n        const xBuf = this.bufferSync(x);\n        const dyBuf = this.bufferSync(dy);\n        for (let wR = 0; wR < filterHeight; ++wR) {\n            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n            for (let wC = 0; wC < filterWidth; ++wC) {\n                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    const d1 = Math.trunc(d2 / chMul);\n                    const dm = d2 % chMul;\n                    let dotProd = 0;\n                    for (let b = 0; b < convInfo.batchSize; ++b) {\n                        for (let yR = yRMin; yR < yRMax; ++yR) {\n                            const xR = wR + yR * strideHeight - topPad;\n                            for (let yC = yCMin; yC < yCMax; ++yC) {\n                                const xC = wC + yC * strideWidth - leftPad;\n                                dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                            }\n                        }\n                    }\n                    dW.set(dotProd, wR, wC, d1, dm);\n                }\n            }\n        }\n        return dW.toTensor();\n    }\n    tile(x, reps) {\n        assertNotComplex(x, 'tile');\n        return tile(this.bufferSync(x), reps);\n    }\n    pad(x, paddings, constantValue) {\n        assertNotComplex(x, 'pad');\n        const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n        const start = paddings.map(p => p[0]);\n        const xBuffer = this.bufferSync(x);\n        const buffer = tf.buffer(outShape, x.dtype);\n        if (constantValue !== 0) {\n            buffer.values.fill(constantValue);\n        }\n        for (let i = 0; i < x.size; i++) {\n            const coords = xBuffer.indexToLoc(i);\n            const outCoords = coords.map((c, i) => c + start[i]);\n            buffer.set(xBuffer.get(...coords), ...outCoords);\n        }\n        return buffer.toTensor();\n    }\n    gather(x, indices, axis) {\n        assertNotComplex([x, indices], 'gather');\n        const newShape = x.shape.slice();\n        const indicesValues = this.readSync(indices.dataId);\n        newShape[axis] = indicesValues.length;\n        const result = tf.buffer(newShape, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < result.size; ++i) {\n            const newLoc = result.indexToLoc(i);\n            const originalLoc = newLoc.slice();\n            originalLoc[axis] = indicesValues[newLoc[axis]];\n            const originalIndex = xBuf.locToIndex(originalLoc);\n            result.values[i] = xBuf.values[originalIndex];\n        }\n        return result.toTensor();\n    }\n    batchToSpaceND(x, blockShape, crops) {\n        assertNotComplex([x], 'batchToSpaceND');\n        const prod = blockShape.reduce((a, b) => a * b);\n        const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n        const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n        const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n        const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n        const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n        return tf.transpose(x.reshape(reshaped), permuted)\n            .reshape(reshapedPermuted)\n            .slice(sliceBeginCoords, sliceSize);\n    }\n    spaceToBatchND(x, blockShape, paddings) {\n        assertNotComplex([x], 'spaceToBatchND');\n        const prod = blockShape.reduce((a, b) => a * b);\n        const completePaddings = [[0, 0]];\n        completePaddings.push(...paddings);\n        for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n            completePaddings.push([0, 0]);\n        }\n        const paddedX = x.pad(completePaddings);\n        const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n        const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n        const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n        return tf.transpose(paddedX.reshape(reshapedPaddedShape), permutedReshapedPaddedPermutation)\n            .reshape(flattenShape);\n    }\n    maxPool(x, convInfo) {\n        assertNotComplex(x, 'maxPool');\n        const xValues = this.readSync(x.dataId);\n        return pool(xValues, x.shape, x.dtype, x.strides, convInfo, 'max')\n            .toTensor();\n    }\n    maxPoolBackprop(dy, x, y, convInfo) {\n        assertNotComplex([x, y], 'maxPoolBackprop');\n        const xValues = this.readSync(x.dataId);\n        const maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const dyBuf = this.bufferSync(dy);\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let d = 0; d < convInfo.inChannels; ++d) {\n                for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                    for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                        // Shader code begins.\n                        const dyRCorner = dxR - padTop;\n                        const dyCCorner = dxC - padLeft;\n                        let dotProd = 0;\n                        for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n                            const dyR = (dyRCorner + wR) / strideHeight;\n                            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                                Math.floor(dyR) !== dyR) {\n                                continue;\n                            }\n                            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                                const dyC = (dyCCorner + wC) / strideWidth;\n                                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                                    Math.floor(dyC) !== dyC) {\n                                    continue;\n                                }\n                                const maxPos = effectiveFilterHeight * effectiveFilterWidth -\n                                    1 - maxPosBuf.get(b, dyR, dyC, d);\n                                const curPos = wR * effectiveFilterWidth + wC;\n                                const mask = maxPos === curPos ? 1 : 0;\n                                if (mask === 0) {\n                                    continue;\n                                }\n                                const pixel = dyBuf.get(b, dyR, dyC, d);\n                                dotProd += pixel * mask;\n                            }\n                        }\n                        dx.set(dotProd, b, dxR, dxC, d);\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    avgPoolBackprop(dy, x, convInfo) {\n        assertNotComplex([dy, x], 'avgPoolBackprop');\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const avgMultiplier = 1 / (filterHeight * filterWidth);\n        const dyBuf = this.bufferSync(dy);\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let d = 0; d < convInfo.inChannels; ++d) {\n                for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                    for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                        // Shader code begins.\n                        const dyRCorner = dxR - padTop;\n                        const dyCCorner = dxC - padLeft;\n                        let dotProd = 0;\n                        for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n                            const dyR = (dyRCorner + wR) / strideHeight;\n                            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                                Math.floor(dyR) !== dyR) {\n                                continue;\n                            }\n                            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                                const dyC = (dyCCorner + wC) / strideWidth;\n                                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                                    Math.floor(dyC) !== dyC) {\n                                    continue;\n                                }\n                                const pixel = dyBuf.get(b, dyR, dyC, d);\n                                dotProd += pixel;\n                            }\n                        }\n                        dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    pool3d(x, convInfo, poolType) {\n        assertNotComplex(x, 'pool3d');\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const initialValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n            Number.POSITIVE_INFINITY);\n        const xValues = this.readSync(x.dataId);\n        const output = tf.buffer(convInfo.outShape, x.dtype);\n        const outputVals = output.values;\n        const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n            convInfo.outShape[3] * convInfo.outShape[4];\n        const outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n        const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n        const outputColStrides = convInfo.outShape[4];\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            const outputBatchOffset = batch * outputBatchStrides;\n            const inputBatchOffset = batch * x.strides[0];\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n                    const xDepthCorner = yDepth * strideDepth - padFront;\n                    let xDepthMin = xDepthCorner;\n                    while (xDepthMin < 0) {\n                        xDepthMin += dilationDepth;\n                    }\n                    const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n                    const outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;\n                    for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n                        const xRowCorner = yRow * strideHeight - padTop;\n                        let xRowMin = xRowCorner;\n                        while (xRowMin < 0) {\n                            xRowMin += dilationHeight;\n                        }\n                        const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n                        const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n                        for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                            const xColCorner = yCol * strideWidth - padLeft;\n                            let xColMin = xColCorner;\n                            while (xColMin < 0) {\n                                xColMin += dilationWidth;\n                            }\n                            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                            // Shader code begins\n                            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n                            let minMaxValue = initialValue;\n                            let avgValue = 0;\n                            let count = 0;\n                            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                                const xDepthOffset = inputBatchOffset + xDepth * x.strides[1];\n                                for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                                    const xRowOffset = xDepthOffset + xRow * x.strides[2];\n                                    for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                                        const xColOffset = xRowOffset + xCol * x.strides[3];\n                                        const pixel = xValues[xColOffset + channel];\n                                        if ((poolType === 'max' && pixel > minMaxValue)) {\n                                            minMaxValue = pixel;\n                                        }\n                                        else if (poolType === 'avg') {\n                                            avgValue += pixel;\n                                            count++;\n                                        }\n                                        if (isNaN(minMaxValue)) {\n                                            break;\n                                        }\n                                    }\n                                    if (isNaN(minMaxValue)) {\n                                        break;\n                                    }\n                                }\n                                if (isNaN(minMaxValue)) {\n                                    break;\n                                }\n                            }\n                            const outputOffset = outputColOffset + channel;\n                            outputVals[outputOffset] =\n                                poolType === 'avg' ? avgValue / count : minMaxValue;\n                        }\n                    }\n                }\n            }\n        }\n        return output.toTensor();\n    }\n    avgPool3d(x, convInfo) {\n        assertNotComplex(x, 'avgPool3d');\n        return this.pool3d(x, convInfo, 'avg').toFloat();\n    }\n    avgPool3dBackprop(dy, x, convInfo) {\n        assertNotComplex([dy, x], 'avgPool3dBackprop');\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n        const dyBuf = this.bufferSync(dy);\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                    for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                        for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                            // Shader code begins.\n                            const dyDepthCorner = dxDepth - padFront;\n                            const dyRowCorner = dxRow - padTop;\n                            const dyColCorner = dxCol - padLeft;\n                            let dotProd = 0;\n                            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                    Math.floor(dyDepth) !== dyDepth) {\n                                    continue;\n                                }\n                                for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                    const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                    if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                        Math.floor(dyRow) !== dyRow) {\n                                        continue;\n                                    }\n                                    for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                        const dyCol = (dyColCorner + wCol) / strideWidth;\n                                        if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                            Math.floor(dyCol) !== dyCol) {\n                                            continue;\n                                        }\n                                        const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                        dotProd += pixel;\n                                    }\n                                }\n                            }\n                            dx.set(dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n                        }\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    maxPool3d(x, convInfo) {\n        assertNotComplex(x, 'maxPool3d');\n        return this.pool3d(x, convInfo, 'max').toFloat();\n    }\n    maxPool3dPositions(x, convInfo) {\n        const maxPositions = tf.buffer(convInfo.outShape, 'int32');\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const xBuf = this.bufferSync(x);\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n                    const xDepthCorner = yDepth * strideDepth - padFront;\n                    let xDepthMin = xDepthCorner;\n                    while (xDepthMin < 0) {\n                        xDepthMin += dilationDepth;\n                    }\n                    const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n                    for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n                        const xRowCorner = yRow * strideHeight - padTop;\n                        let xRowMin = xRowCorner;\n                        while (xRowMin < 0) {\n                            xRowMin += dilationHeight;\n                        }\n                        const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n                        for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                            const xColCorner = yCol * strideWidth - padLeft;\n                            let xColMin = xColCorner;\n                            while (xColMin < 0) {\n                                xColMin += dilationWidth;\n                            }\n                            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                            // Shader code begins\n                            let maxValue = Number.NEGATIVE_INFINITY;\n                            let maxPosition = -1;\n                            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                                const wDepth = xDepth - xDepthCorner;\n                                for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                                    const wRow = xRow - xRowCorner;\n                                    for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                                        const wCol = xCol - xColCorner;\n                                        const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                                        if (pixel >= maxValue) {\n                                            maxValue = pixel;\n                                            maxPosition = wDepth * effectiveFilterHeight *\n                                                effectiveFilterWidth +\n                                                wRow * effectiveFilterHeight + wCol;\n                                        }\n                                    }\n                                }\n                            }\n                            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n                        }\n                    }\n                }\n            }\n        }\n        return maxPositions.toTensor();\n    }\n    maxPool3dBackprop(dy, x, y, convInfo) {\n        assertNotComplex([x, y], 'maxPool3dBackprop');\n        const maxPositions = this.maxPool3dPositions(x, convInfo);\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const maxPosBuf = this.bufferSync(maxPositions);\n        const dyBuf = this.bufferSync(dy);\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                    for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                        for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                            // Shader code begins\n                            const dyDepthCorner = dxDepth - padFront;\n                            const dyRowCorner = dxRow - padTop;\n                            const dyColCorner = dxCol - padLeft;\n                            let dotProd = 0;\n                            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                    Math.floor(dyDepth) !== dyDepth) {\n                                    continue;\n                                }\n                                for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                    const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                    if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                        Math.floor(dyRow) !== dyRow) {\n                                        continue;\n                                    }\n                                    for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                        const dyCol = (dyColCorner + wCol) / strideWidth;\n                                        if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                            Math.floor(dyCol) !== dyCol) {\n                                            continue;\n                                        }\n                                        const maxPos = effectiveFilterDepth *\n                                            effectiveFilterHeight * effectiveFilterWidth -\n                                            1 -\n                                            maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                        const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                                            wRow * effectiveFilterWidth + wCol;\n                                        const mask = maxPos === curPos ? 1 : 0;\n                                        if (mask === 0) {\n                                            continue;\n                                        }\n                                        const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                        dotProd += pixel * mask;\n                                    }\n                                }\n                            }\n                            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n                        }\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    cast(x, dtype) {\n        return backend_util.castTensor(x, dtype, this);\n    }\n    reshape(x, shape) {\n        return backend_util.reshapeTensor(x, shape);\n    }\n    avgPool(x, convInfo) {\n        assertNotComplex(x, 'avgPool');\n        assertNotComplex(x, 'maxPool');\n        const xValues = this.readSync(x.dataId);\n        return pool(xValues, x.shape, x.dtype, x.strides, convInfo, 'avg')\n            .toTensor()\n            .toFloat();\n    }\n    resizeBilinear(x, newHeight, newWidth, alignCorners) {\n        assertNotComplex(x, 'resizeBilinear');\n        const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n        const xValues = this.readSync(x.dataId);\n        const result = new Float32Array(util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n        const effectiveInputSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutputSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        let outputIdx = 0;\n        const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n        const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n        for (let b = 0; b < batch; b++) {\n            for (let r = 0; r < newHeight; r++) {\n                const sourceFracRow = effectiveRowSizeRatio * r;\n                const sourceRowFloor = Math.floor(sourceFracRow);\n                const rowFrac = sourceFracRow - sourceRowFloor;\n                const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n                const topRowOffset = b * x.strides[0] + sourceRowFloor * x.strides[1];\n                const botRowOffset = b * x.strides[0] + sourceRowCeil * x.strides[1];\n                for (let c = 0; c < newWidth; c++) {\n                    const sourceFracCol = effectiveColSizeRatio * c;\n                    const sourceColFloor = Math.floor(sourceFracCol);\n                    const colFrac = sourceFracCol - sourceColFloor;\n                    const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n                    const topLeftOffest = topRowOffset + sourceColFloor * x.strides[2];\n                    const botLeftOffset = botRowOffset + sourceColFloor * x.strides[2];\n                    const topRightOffset = topRowOffset + sourceColCeil * x.strides[2];\n                    const botRightOffest = botRowOffset + sourceColCeil * x.strides[2];\n                    for (let d = 0; d < numChannels; d++) {\n                        // Begin shader.\n                        // Compute the fractional index of the source.\n                        const topLeft = xValues[topLeftOffest + d];\n                        const bottomLeft = xValues[botLeftOffset + d];\n                        const topRight = xValues[topRightOffset + d];\n                        const bottomRight = xValues[botRightOffest + d];\n                        const top = topLeft + (topRight - topLeft) * colFrac;\n                        const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n                        const newValue = top + (bottom - top) * rowFrac;\n                        result[outputIdx++] = newValue;\n                    }\n                }\n            }\n        }\n        return tf.tensor(result, [batch, newHeight, newWidth, numChannels]);\n    }\n    resizeBilinearBackprop(dy, x, alignCorners) {\n        assertNotComplex([dy, x], 'resizeBilinearBackprop');\n        const [batch, xHeight, xWidth, depth] = x.shape;\n        const [, yHeight, yWidth] = dy.shape;\n        const output = new Float32Array(batch * xHeight * xWidth * depth);\n        // In the backwards pass, we want to find the pixels that were generated\n        // for each pixel in the input image the forward pass and add the\n        // corresponding coefficient from dy to the gradient (with some\n        // interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        // Reference implementation\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n        const dyValues = this.readSync(dy.dataId);\n        let offset = 0;\n        for (let b = 0; b < batch; b++) {\n            const bOffset = b * x.strides[0];\n            for (let r = 0; r < yHeight; r++) {\n                const dxR = r * heightScale;\n                const topDxRIndex = Math.floor(dxR);\n                const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n                const topDxROffset = bOffset + topDxRIndex * x.strides[1];\n                const bottomDxROffset = bOffset + bottomDxRIndex * x.strides[1];\n                const dxRLerp = dxR - topDxRIndex;\n                const inverseDxRLerp = 1.0 - dxRLerp;\n                for (let c = 0; c < yWidth; c++) {\n                    const dxC = c * widthScale;\n                    const leftDxCIndex = Math.floor(dxC);\n                    const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n                    const dxCLerp = dxC - leftDxCIndex;\n                    const inverseDxCLerp = 1.0 - dxCLerp;\n                    const topLeftRCOffset = topDxROffset + leftDxCIndex * x.strides[2];\n                    const topRightRCOffset = topDxROffset + rightDxCIndex * x.strides[2];\n                    const bottomLeftRCOffset = bottomDxROffset + leftDxCIndex * x.strides[2];\n                    const bottomRightRCOffset = bottomDxROffset + rightDxCIndex * x.strides[2];\n                    const inverseDxRLerpTimesInverseDxCLerp = inverseDxRLerp * inverseDxCLerp;\n                    const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n                    const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n                    const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n                    for (let d = 0; d < depth; d++) {\n                        const dyVal = dyValues[offset++];\n                        output[topLeftRCOffset + d] +=\n                            dyVal * inverseDxRLerpTimesInverseDxCLerp;\n                        output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n                        output[bottomLeftRCOffset + d] +=\n                            dyVal * dxRLerpTimesInverseDxCLerp;\n                        output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n                    }\n                }\n            }\n        }\n        return tf.tensor4d(output, [batch, xWidth, xHeight, depth], x.dtype);\n    }\n    resizeNearestNeighbor(x, newHeight, newWidth, alignCorners) {\n        assertNotComplex(x, 'resizeNearestNeighbor');\n        const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n        const xValues = this.readSync(x.dataId);\n        const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n        const effectiveInputSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutputSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n        const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n        let outputOffset = 0;\n        for (let b = 0; b < batch; b++) {\n            const batchOffset = b * x.strides[0];\n            for (let r = 0; r < newHeight; r++) {\n                const sourceFracRow = effectiveRowSizeRatio * r;\n                const sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) :\n                    Math.floor(sourceFracRow));\n                const rowOffset = batchOffset + sourceNearestRow * x.strides[1];\n                for (let c = 0; c < newWidth; c++) {\n                    const sourceFracCol = effectiveColSizeRatio * c;\n                    const sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) :\n                        Math.floor(sourceFracCol));\n                    const colOffset = rowOffset + sourceNearestCol * x.strides[2];\n                    for (let d = 0; d < numChannels; d++) {\n                        // Begin shader.\n                        // Compute the fractional index of the source.\n                        const newVal = xValues[colOffset + d];\n                        output[outputOffset++] = newVal;\n                    }\n                }\n            }\n        }\n        return tf.tensor(output, [batch, newHeight, newWidth, numChannels], x.dtype);\n    }\n    resizeNearestNeighborBackprop(dy, x, alignCorners) {\n        assertNotComplex([dy, x], 'resizeNearestNeighborBackprop');\n        const [batch, xHeight, xWidth, depth] = x.shape;\n        const [, yHeight, yWidth] = dy.shape;\n        const output = new Float32Array(batch * xHeight * xWidth * depth);\n        const dyValues = this.readSync(dy.dataId);\n        // In the backwards pass, we want to find the pixels that were generated\n        // for each pixel in the input image the forward pass\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        // Loop over the output space.\n        for (let b = 0; b < batch; b++) {\n            const batchOffset = b * x.strides[0];\n            for (let r = 0; r < xHeight; r++) {\n                const rowOffset = batchOffset + r * x.strides[1];\n                // Compute bounds for where in dy we will look\n                const startRLerp = Math.floor(r * invHeightScale);\n                const startDyR = Math.floor(startRLerp - (winHeight / 2));\n                for (let c = 0; c < xWidth; c++) {\n                    const colOffset = rowOffset + c * x.strides[2];\n                    // Compute bounds for where in dy we will look\n                    const startCLerp = Math.floor(c * invWidthScale);\n                    const startDyC = Math.floor(startCLerp - (winWidth / 2));\n                    for (let d = 0; d < depth; d++) {\n                        let accum = 0;\n                        // loop over dy\n                        for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n                            const dyR = dyRIndex + startDyR;\n                            // Guard against the window exceeding the bounds of dy\n                            if (dyR < 0 || dyR >= yHeight) {\n                                continue;\n                            }\n                            const dyROffset = batchOffset + dyR * dy.strides[1];\n                            const sourceFracRow = dyR * heightScale;\n                            const sourceNearestRow = Math.min(xHeight - 1, alignCorners ? Math.round(sourceFracRow) :\n                                Math.floor(sourceFracRow));\n                            if (r !== sourceNearestRow) {\n                                continue;\n                            }\n                            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n                                const dyC = dyCIndex + startDyC;\n                                // Guard against the window exceeding the bounds of dy\n                                if (dyC < 0 || dyC >= yWidth) {\n                                    continue;\n                                }\n                                const dyCOffset = dyROffset + dyC * dy.strides[2];\n                                const sourceFracCol = dyC * widthScale;\n                                const sourceNearestCol = Math.min(xWidth - 1, alignCorners ? Math.round(sourceFracCol) :\n                                    Math.floor(sourceFracCol));\n                                if (c === sourceNearestCol) {\n                                    accum += dyValues[dyCOffset + d];\n                                }\n                            }\n                        }\n                        output[colOffset + d] = accum;\n                    }\n                }\n            }\n        }\n        return tf.tensor4d(output, x.shape, x.dtype);\n    }\n    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n        assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n        const xVals = this.readSync(x.dataId);\n        const mVals = this.readSync(mean.dataId);\n        const varVals = this.readSync(variance.dataId);\n        const sVals = scale ? this.readSync(scale.dataId) :\n            new Float32Array([1]);\n        const offVals = offset ? this.readSync(offset.dataId) :\n            new Float32Array([0]);\n        const outVals = new Float32Array(xVals.length);\n        const offValsLength = offVals.length;\n        const sValsLength = sVals.length;\n        const varValsLength = varVals.length;\n        const mValsLength = mVals.length;\n        let offi = 0;\n        let mi = 0;\n        let si = 0;\n        let vi = 0;\n        for (let i = 0; i < xVals.length; ++i) {\n            outVals[i] = offVals[offi++] +\n                (xVals[i] - mVals[mi++]) * sVals[si++] /\n                    Math.sqrt(varVals[vi++] + varianceEpsilon);\n            if (offi >= offValsLength) {\n                offi = 0;\n            }\n            if (mi >= mValsLength) {\n                mi = 0;\n            }\n            if (si >= sValsLength) {\n                si = 0;\n            }\n            if (vi >= varValsLength) {\n                vi = 0;\n            }\n        }\n        return tf.tensor4d(outVals, x.shape);\n    }\n    localResponseNormalization4D(x, depthRadius, bias, alpha, beta) {\n        assertNotComplex(x, 'localResponseNormalization4D');\n        const channels = x.shape[3];\n        const maxD = channels - 1;\n        const xValues = this.readSync(x.dataId);\n        const size = x.size;\n        const result = new Float32Array(size);\n        function sumAcrossChannels(offset) {\n            const currentChannel = offset % channels;\n            let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n            const endSumOffset = offset - currentChannel +\n                Math.min(currentChannel + depthRadius, maxD);\n            let sum = 0.0;\n            for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n                const z = xValues[beginSumOffset];\n                sum += z * z;\n            }\n            return sum;\n        }\n        for (let offset = 0; offset < size; offset++) {\n            const sum = sumAcrossChannels(offset);\n            const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n            result[offset] = val;\n        }\n        return tf.tensor4d(result, x.shape);\n    }\n    LRNGrad(dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {\n        assertNotComplex(dy, 'LRNGrad');\n        const channels = dy.shape[3];\n        const dyValues = this.readSync(dy.dataId);\n        const inputImageValues = this.readSync(inputImage.dataId);\n        const outputImageValues = this.readSync(outputImage.dataId);\n        const result = new Float32Array(dy.size);\n        const size = dy.size;\n        for (let offset = 0; offset < size; offset++) {\n            const currentChannel = offset % channels;\n            const depthBegin = (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n            const depthEnd = (offset - currentChannel) +\n                Math.min(channels, currentChannel + depthRadius + 1);\n            let norm = 0;\n            for (let k = depthBegin; k < depthEnd; k++) {\n                norm += Math.pow(inputImageValues[k], 2);\n            }\n            norm = alpha * norm + bias;\n            for (let k = depthBegin; k < depthEnd; k++) {\n                let dyi = -2 * alpha * beta * inputImageValues[k] *\n                    outputImageValues[offset] / norm;\n                if (offset === k) {\n                    dyi += Math.pow(norm, -beta);\n                }\n                dyi *= dyValues[offset];\n                result[k] += dyi;\n            }\n        }\n        return tf.tensor4d(result, dy.shape);\n    }\n    multinomial(logits, normalized, numSamples, seed) {\n        assertNotComplex(logits, 'multinomial');\n        const probabilities = normalized ? logits : tf.softmax(logits);\n        const batchSize = probabilities.shape[0];\n        const numEvents = probabilities.shape[1];\n        const res = tf.zeros([batchSize, numSamples], 'int32');\n        const resVals = this.readSync(res.dataId);\n        const probVals = this.readSync(probabilities.dataId);\n        for (let b = 0; b < batchSize; ++b) {\n            const offset = b * numEvents;\n            // The cdf won't include the last event. It will be implicit if no other\n            // event happened.\n            const cdf = new Float32Array(numEvents - 1);\n            cdf[0] = probVals[offset];\n            for (let event = 1; event < cdf.length; ++event) {\n                cdf[event] = cdf[event - 1] + probVals[offset + event];\n            }\n            const random = seedrandom.alea(seed.toString());\n            const outOffset = b * numSamples;\n            for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n                const r = random();\n                // Assume last event happened by default.\n                resVals[outOffset + sampleId] = cdf.length;\n                for (let event = 0; event < cdf.length; event++) {\n                    if (r < cdf[event]) {\n                        resVals[outOffset + sampleId] = event;\n                        break;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    oneHot(indices, depth, onValue, offValue) {\n        assertNotComplex(indices, 'oneHot');\n        const res = new Float32Array(indices.size * depth);\n        res.fill(offValue);\n        const indicesVal = this.readSync(indices.dataId);\n        for (let event = 0; event < indices.size; ++event) {\n            if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n                res[event * depth + indicesVal[event]] = onValue;\n            }\n        }\n        return tf.tensor2d(res, [indices.size, depth], 'int32');\n    }\n    nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n        assertNotComplex(boxes, 'nonMaxSuppression');\n        const boxesVals = this.readSync(boxes.dataId);\n        const scoresVals = this.readSync(scores.dataId);\n        return nonMaxSuppressionV3(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n    }\n    fft(x) {\n        return this.fftBatch(x, false);\n    }\n    ifft(x) {\n        return this.fftBatch(x, true);\n    }\n    /**\n     * Calculate FFT of inner most elements of batch tensor.\n     */\n    fftBatch(x, inverse) {\n        const batch = x.shape[0];\n        const innerDim = x.shape[1];\n        // Collects real and imaginary values separately.\n        const realResult = tf.buffer(x.shape, 'float32');\n        const imagResult = tf.buffer(x.shape, 'float32');\n        const real = tf.real(x).as2D(batch, innerDim);\n        const imag = tf.imag(x).as2D(batch, innerDim);\n        for (let b = 0; b < batch; b++) {\n            // TODO: Support slice ops for complex type.\n            const r = real.slice([b, 0], [1, innerDim]);\n            const i = imag.slice([b, 0], [1, innerDim]);\n            const input = tf.complex(r, i);\n            // Run FFT by batch element.\n            const res = this.readSync(this.fftImpl(input, inverse).dataId);\n            for (let d = 0; d < innerDim; d++) {\n                const c = backend_util.getComplexWithIndex(res, d);\n                realResult.values[b * innerDim + d] = c.real;\n                imagResult.values[b * innerDim + d] = c.imag;\n            }\n        }\n        const t = tf.complex(realResult.toTensor(), imagResult.toTensor());\n        return t.as2D(batch, innerDim);\n    }\n    fftImpl(x, inverse) {\n        const x1D = x.as1D();\n        const n = x1D.size;\n        if (this.isExponentOf2(n)) {\n            let result = this.fftRadix2(x1D, n, inverse).as2D(x.shape[0], x.shape[1]);\n            if (inverse) {\n                result = tf.complex(tf.real(result).div(tf.scalar(n)), tf.imag(result).div(tf.scalar(n)));\n            }\n            return result;\n        }\n        else {\n            const data = this.readSync(x.dataId);\n            const rawOutput = this.fourierTransformByMatmul(data, n, inverse);\n            const output = backend_util.splitRealAndImagArrays(rawOutput);\n            return tf.complex(output.real, output.imag).as2D(x.shape[0], x.shape[1]);\n        }\n    }\n    isExponentOf2(size) {\n        return (size & size - 1) === 0;\n    }\n    // FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\n    fftRadix2(input, size, inverse) {\n        if (size === 1) {\n            return input;\n        }\n        const data = this.readSync(input.dataId);\n        const half = size / 2;\n        const evenComplex = backend_util.complexWithEvenIndex(data);\n        let evenTensor = tf.complex(evenComplex.real, evenComplex.imag).as1D();\n        const oddComplex = backend_util.complexWithOddIndex(data);\n        let oddTensor = tf.complex(oddComplex.real, oddComplex.imag).as1D();\n        // Recursive call for half part of original input.\n        evenTensor = this.fftRadix2(evenTensor, half, inverse);\n        oddTensor = this.fftRadix2(oddTensor, half, inverse);\n        const e = backend_util.exponents(size, inverse);\n        const exponent = tf.complex(e.real, e.imag).mul(oddTensor);\n        const addPart = evenTensor.add(exponent);\n        const subPart = evenTensor.sub(exponent);\n        const realTensor = tf.real(addPart).concat(tf.real(subPart));\n        const imagTensor = tf.imag(addPart).concat(tf.imag(subPart));\n        return tf.complex(realTensor, imagTensor).as1D();\n    }\n    // Calculate fourier transform by multplying sinusoid matrix.\n    fourierTransformByMatmul(data, size, inverse) {\n        const ret = new Float32Array(size * 2);\n        // TODO: Use matmul instead once it supports complex64 type.\n        for (let r = 0; r < size; r++) {\n            let real = 0.0;\n            let imag = 0.0;\n            for (let c = 0; c < size; c++) {\n                const e = backend_util.exponent(r * c, size, inverse);\n                const term = backend_util.getComplexWithIndex(data, c);\n                real += term.real * e.real - term.imag * e.imag;\n                imag += term.real * e.imag + term.imag * e.real;\n            }\n            if (inverse) {\n                real /= size;\n                imag /= size;\n            }\n            backend_util.assignToTypedArray(ret, real, imag, r);\n        }\n        return ret;\n    }\n    depthToSpace(x, blockSize, dataFormat) {\n        util.assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);\n        util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n        const batchSize = x.shape[0];\n        const inputHeight = x.shape[1];\n        const inputWidth = x.shape[2];\n        const inputDepth = x.shape[3];\n        const outputHeight = inputHeight * blockSize;\n        const outputWidth = inputWidth * blockSize;\n        const outputDepth = inputDepth / (blockSize * blockSize);\n        const xValues = this.readSync(x.dataId);\n        const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n        let outputIdx = 0;\n        for (let b = 0; b < batchSize; ++b) {\n            for (let h = 0; h < outputHeight; ++h) {\n                const inH = Math.floor(h / blockSize);\n                const offsetH = (h % blockSize);\n                for (let w = 0; w < outputWidth; ++w) {\n                    const inW = Math.floor(w / blockSize);\n                    const offsetW = (w % blockSize);\n                    const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n                    for (let d = 0; d < outputDepth; ++d) {\n                        const inD = d + offsetD;\n                        const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n                        result[outputIdx++] = xValues[inputIdx];\n                    }\n                }\n            }\n        }\n        return tf.tensor4d(result, [batchSize, outputHeight, outputWidth, outputDepth]);\n    }\n    broadcastedBinaryOp(a, b, dtype, op) {\n        const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        const result = tf.buffer(newShape, dtype);\n        const aVals = this.readSync(a.dataId);\n        const bVals = this.readSync(b.dataId);\n        const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n        const resVals = result.values;\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < resVals.length; ++i) {\n                resVals[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            const aBuf = this.bufferSync(a);\n            const bBuf = this.bufferSync(b);\n            for (let i = 0; i < resVals.length; ++i) {\n                const loc = result.indexToLoc(i);\n                const aLoc = loc.slice(-a.rank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = aBuf.locToIndex(aLoc);\n                const bLoc = loc.slice(-b.rank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = bBuf.locToIndex(bLoc);\n                resVals[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return result.toTensor();\n    }\n    broadcastedBinaryComplexOp(a, b, op) {\n        const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        const realResult = tf.buffer(newShape, 'float32');\n        const imagResult = tf.buffer(newShape, 'float32');\n        const aVals = this.readSync(a.dataId);\n        const bVals = this.readSync(b.dataId);\n        const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n        const realVals = realResult.values;\n        const imagVals = imagResult.values;\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < realVals.length; i++) {\n                const aIdx = i % aVals.length;\n                const bIdx = i % bVals.length;\n                const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n                realVals[i] = result.real;\n                imagVals[i] = result.imag;\n            }\n        }\n        else {\n            const aRealBuf = this.bufferSync(this.data.get(a.dataId).complexTensors.real);\n            const bRealBuf = this.bufferSync(this.data.get(b.dataId).complexTensors.real);\n            for (let i = 0; i < realVals.length; i++) {\n                const loc = realResult.indexToLoc(i);\n                const aLoc = loc.slice(-a.rank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = aRealBuf.locToIndex(aLoc);\n                const bLoc = loc.slice(-b.rank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = bRealBuf.locToIndex(bLoc);\n                const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n                realVals[i] = opResult.real;\n                imagVals[i] = opResult.imag;\n            }\n        }\n        return this.complex(realResult.toTensor(), imagResult.toTensor());\n    }\n    split(x, sizeSplits, axis) {\n        return split(x, sizeSplits, axis);\n    }\n    dispose() { }\n    floatPrecision() {\n        return 32;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return super.epsilon();\n    }\n    cropAndResize(images, boxes, boxIndex, cropSize, method, extrapolationValue) {\n        const [batch, imageHeight, imageWidth, numChannels] = images.shape;\n        const numBoxes = boxes.shape[0];\n        const [cropHeight, cropWidth] = cropSize;\n        const output = tf.buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n        const boxVals = this.readSync(boxes.dataId);\n        const boxIndVals = this.readSync(boxIndex.dataId);\n        const imageVals = this.readSync(images.dataId);\n        const inStride = images.strides; // to calculate flat indexes into image\n        const outStride = output.strides; // to calculate flat indexes into output\n        // Reference implementation\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n        for (let b = 0; b < numBoxes; b++) {\n            const startInd = b * 4;\n            const y1 = boxVals[startInd];\n            const x1 = boxVals[startInd + 1];\n            const y2 = boxVals[startInd + 2];\n            const x2 = boxVals[startInd + 3];\n            const bInd = boxIndVals[b];\n            if (bInd >= batch) {\n                continue;\n            }\n            const heightScale = (cropHeight > 1) ?\n                (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) :\n                0;\n            const widthScale = (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n            for (let y = 0; y < cropHeight; y++) {\n                const yInd = (cropHeight > 1) ?\n                    y1 * (imageHeight - 1) + y * (heightScale) :\n                    0.5 * (y1 + y2) * (imageHeight - 1);\n                if (yInd < 0 || yInd > imageHeight - 1) {\n                    for (let x = 0; x < cropWidth; x++) {\n                        for (let c = 0; c < numChannels; c++) {\n                            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = extrapolationValue;\n                        }\n                    }\n                    continue;\n                }\n                if (method === 'bilinear') {\n                    const topInd = Math.floor(yInd);\n                    const bottomInd = Math.ceil(yInd);\n                    const yLerp = yInd - topInd;\n                    for (let x = 0; x < cropWidth; x++) {\n                        const xInd = (cropWidth > 1) ?\n                            x1 * (imageWidth - 1) + x * widthScale :\n                            0.5 * (x1 + x2) * (imageWidth - 1);\n                        if (xInd < 0 || xInd > imageWidth - 1) {\n                            for (let c = 0; c < numChannels; c++) {\n                                const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                                output.values[ind] = extrapolationValue;\n                            }\n                            continue;\n                        }\n                        const leftInd = Math.floor(xInd);\n                        const rightInd = Math.ceil(xInd);\n                        const xLerp = xInd - leftInd;\n                        for (let c = 0; c < numChannels; c++) {\n                            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                                bInd * inStride[0];\n                            const topLeft = imageVals[ind];\n                            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                                bInd * inStride[0];\n                            const topRight = imageVals[ind];\n                            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                                bInd * inStride[0];\n                            const bottomLeft = imageVals[ind];\n                            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                                bInd * inStride[0];\n                            const bottomRight = imageVals[ind];\n                            const top = topLeft + (topRight - topLeft) * xLerp;\n                            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n                            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = top + ((bottom - top) * yLerp);\n                        }\n                    }\n                }\n                else { // method == \"nearest\"\n                    for (let x = 0; x < cropWidth; ++x) {\n                        const xInd = (cropWidth > 1) ?\n                            x1 * (imageWidth - 1) + x * widthScale :\n                            0.5 * (x1 + x2) * (imageWidth - 1);\n                        if (xInd < 0 || xInd > imageWidth - 1) {\n                            for (let c = 0; c < numChannels; c++) {\n                                const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                                output.values[ind] = extrapolationValue;\n                            }\n                            continue;\n                        }\n                        const closestX = Math.round(xInd);\n                        const closestY = Math.round(yInd);\n                        for (let c = 0; c < numChannels; c++) {\n                            const inInd = c + closestX * inStride[2] +\n                                closestY * inStride[1] + bInd * inStride[0];\n                            const outInd = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[outInd] = imageVals[inInd];\n                        }\n                    }\n                }\n            }\n        }\n        return output.toTensor();\n    }\n    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n        const sumDupeIndices = false;\n        return this.scatter(sparseIndices, sparseValues, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n    }\n    gatherND(x, indices) {\n        const indicesShape = indices.shape;\n        const sliceRank = indicesShape[indicesShape.length - 1];\n        const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(x, indices);\n        if (numSlices === 0) {\n            return tf.tensor([], resultShape, x.dtype);\n        }\n        const buffer = new TensorBuffer([numSlices, sliceSize], x.dtype);\n        const indicesData = this.readSync(indices.dataId);\n        const xData = this.readSync(x.dataId);\n        for (let i = 0; i < numSlices; i++) {\n            const index = [];\n            let flattenIndex = 0;\n            for (let j = 0; j < sliceRank; j++) {\n                const dim = indicesData[i * sliceRank + j];\n                flattenIndex += dim * strides[j];\n                index.push(dim);\n            }\n            if (flattenIndex < 0 || flattenIndex >= x.size / sliceSize) {\n                throw new Error(`Invalid indices: ${index} does not index into ${x.shape}`);\n            }\n            for (let k = 0; k < sliceSize; k++) {\n                buffer.values[i * sliceSize + k] = xData[flattenIndex * sliceSize + k];\n            }\n        }\n        return buffer.toTensor().reshape(resultShape);\n    }\n    scatterND(indices, updates, shape) {\n        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n        const defaultValue = tf.scalar(0);\n        const sumDupeIndices = true;\n        return this.scatter(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n    }\n    fill(shape, value, dtype) {\n        dtype = dtype || util.inferDtype(value);\n        const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n        values.fill(value);\n        return engine().makeTensor(values, shape, dtype, this);\n    }\n    onesLike(x) {\n        if (x.dtype === 'string') {\n            throw new Error('onesLike is not supported for string tensors');\n        }\n        else {\n            return this.fill(x.shape, 1, x.dtype);\n        }\n    }\n    zerosLike(x) {\n        const values = util.getArrayFromDType(x.dtype, util.sizeFromShape(x.shape));\n        return this.makeOutput(values, x.shape, x.dtype);\n    }\n    linspace(start, stop, num) {\n        return backend_util.linspaceImpl(start, stop, num);\n    }\n    scatter(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n        const flattenShape = [outputSize / sliceSize, sliceSize];\n        const indicesData = this.readSync(indices.dataId);\n        const updatesData = this.readSync(updates.dataId);\n        if (outputSize === 0) {\n            return tf.tensor([], shape, updates.dtype);\n        }\n        const buffer = new TensorBuffer(flattenShape, updates.dtype);\n        buffer.values.fill(this.readSync(defaultValue.dataId)[0]);\n        for (let i = 0; i < numUpdates; i++) {\n            const index = [];\n            let flattenIndex = 0;\n            for (let j = 0; j < sliceRank; j++) {\n                const dim = indicesData[i * sliceRank + j];\n                index.push(dim);\n                flattenIndex += dim * strides[j];\n            }\n            if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n                throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n            }\n            for (let k = 0; k < sliceSize; k++) {\n                if (sumDupeIndices) {\n                    buffer.values[flattenIndex * sliceSize + k] +=\n                        updatesData[i * sliceSize + k];\n                }\n                else {\n                    buffer.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n                        updatesData[0] :\n                        updatesData[i * sliceSize + k];\n                }\n            }\n        }\n        return buffer.toTensor().reshape(shape);\n    }\n}\n//# sourceMappingURL=backend_cpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport {shared} from '@tensorflow/tfjs-backend-cpu/dist/base';\n\nconst {maxImpl: maxImplCPU, transposeImpl: transposeImplCPU} = shared;\n\nexport {maxImplCPU, transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value > max) {\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n//# sourceMappingURL=Max_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n    const xRank = xShape.length;\n    const xSize = util.sizeFromShape(xShape);\n    const xStrides = util.computeStrides(xShape);\n    const newStrides = util.computeStrides(newShape);\n    const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n    for (let i = 0; i < xSize; ++i) {\n        const loc = util.indexToLoc(i, xRank, xStrides);\n        // Permute location.\n        const newLoc = new Array(loc.length);\n        for (let i = 0; i < newLoc.length; i++) {\n            newLoc[i] = loc[perm[i]];\n        }\n        const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n        result[newIndex] = xVals[i];\n    }\n    return result;\n}\n//# sourceMappingURL=Transpose_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols, isReshapeFree} from '../webgl_util';\n\nfunction packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, null /* customSetup */,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n\nexport function reshape(\n    x: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const xTexData = backend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, afterShape) &&\n      !(xTexData.texture !== null &&\n        isReshapeFree(xTexData.shape, afterShape))) {\n    return packedReshape(x, afterShape, backend);\n  }\n\n  return {dataId: x.dataId, shape: afterShape, dtype: x.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernel_utils/reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(x, [batchSize, inSize], backend);\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n\n  if (reshapedInput.dataId !== x.dataId) {\n    // dispose the output of the packed reshape.\n    backend.disposeData(reshapedInput.dataId);\n  }\n\n  return reshape(reduced, outShape, backend);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod';\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const [batchSize, inSize] = x.shape;\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo = {windowSize, inSize, batchSize};\n  const program = new ReduceProgram(reduceInfo, reductionType);\n  const output = backend.runWebGLProgram(program, [x], dtype);\n\n  if (output.shape[1] === 1) {\n    return output;\n  }\n\n  return reduce(output, dtype, reductionType, backend);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Max, MaxAttrs, MaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxInputs;\n    const {reductionIndices} = attrs as {} as MaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n\n    const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const maxInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    let maxInput = x;\n    if (maxInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(maxInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const maxInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        maxInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const maxInputData = webglBackend.texData.get(maxInput.dataId);\n        maxInputData.values = maxInputValues;\n      } else {\n        maxInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n    let out;\n    if (shouldExecuteOnCPU) {\n      const xTexData = webglBackend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const outValues = maxImplCPU(\n          values, util.sizeFromShape(reduceShape), maxOutShape, x.dtype);\n\n      out = webglBackend.makeTensorInfo(maxOutShape, x.dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n    } else {\n      out = maxImpl(maxInput, reduceShape, maxOutShape, webglBackend);\n    }\n\n    if (maxInputIsTransposed) {\n      webglBackend.disposeData(maxInput.dataId);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {divConfig} from './kernels/Div';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {maxConfig} from './kernels/Max';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {transposeConfig} from './kernels/Transpose';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  maxConfig, fromPixelsConfig, divConfig, nonMaxSuppressionV3Config,\n  nonMaxSuppressionV5Config, squareConfig, squaredDifferenceConfig,\n  transposeConfig, maxPoolWithArgmaxConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    backend_util.warn(\n        'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n\n    const {boxes, scores} = inputs as NonMaxSuppressionV3Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold} =\n        attrs as unknown as NonMaxSuppressionV3Attrs;\n\n    const gpuBackend = backend as MathBackendWebGL;\n\n    const boxesVals = gpuBackend.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = gpuBackend.readSync(scores.dataId) as TypedArray;\n\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n\n    return kernel_impls.nonMaxSuppressionV3(\n        boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n        scoreThresholdVal);\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5 = kernel_impls.nonMaxSuppressionV5;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    backend_util.warn(\n        'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n\n    const {boxes, scores} = inputs as NonMaxSuppressionV5Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} =\n        attrs as unknown as NonMaxSuppressionV5Attrs;\n\n    const gpuBackend = backend as MathBackendWebGL;\n\n    const boxesVals = gpuBackend.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = gpuBackend.readSync(scores.dataId) as TypedArray;\n\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n\n    const {selectedIndices, selectedScores} = nonMaxSuppressionV5(\n        boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n        scoreThresholdVal, softNmsSigmaVal);\n\n    return [selectedIndices, selectedScores];\n  }\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square, SquareInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SQUARE, UnaryOpProgram} from '../unaryop_gpu';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const webglBackend = backend as MathBackendWebGL;\n    const program = new UnaryOpProgram(x.shape, SQUARE);\n    return webglBackend.runWebGLProgram(program, [x], x.dtype);\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, SquaredDifference, SquaredDifferenceInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {a, b} = inputs as SquaredDifferenceInputs;\n    const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n    const webGLBackend = backend as MathBackendWebGL;\n\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(SQUARED_DIFFERENCE, a.shape, b.shape) :\n        new BinaryOpProgram(SQUARED_DIFFERENCE, a.shape, b.shape);\n    return webGLBackend.compileAndRun(program, [a, b]);\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as TransposeInputs;\n    const {perm} = attrs as {} as TransposeAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = x.shape[perm[i]];\n    }\n\n    let out: TensorInfo;\n    if (webglBackend.shouldExecuteOnCPU([x])) {\n      const xTexData = webglBackend.texData.get(x.dataId);\n      const values = xTexData.values as TypedArray;\n      const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n      out = webglBackend.makeTensorInfo(newShape, x.dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n    } else {\n      out = transposeImpl(x, perm, webglBackend);\n    }\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n */\n/** @doc {heading: 'Environment', namespace: 'webgl'} */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\nimport './register_all_kernels';\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.0.1';\nexport {version};\n"],"names":["PackingScheme","TextureUsage","PhysicalTextureType","contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","setWebGLContext","webGLVersion","gl","getWebGLContext","Error","canvas","OffscreenCanvas","document","createElement","createCanvas","addEventListener","ev","preventDefault","getContext","getWebGLRenderingContext","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getDenseTexShape","shape","size","util","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","max","getTextureConfig","textureHalfFloatExtension","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","glany","env","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","downloadTextureFormat","callAndCheck","debugMode","func","returnValue","error","getError","NO_ERROR","getWebGLErrorMessage","checkWebGLError","canBeRepresented","num","getBool","abs","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getExtensionOrThrow","debug","extensionName","throwIfNull","getExtension","createVertexShader","vertexShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","createFragmentShader","fragmentShaderSource","fragmentShader","FRAGMENT_SHADER","shaderInfoLog","lineNumberRegexResult","lineNumberRegex","exec","lineNumber","shaderLines","split","pad","length","toString","linesWithLineNumbers","map","line","rightPad","maxLineLength","i","beforeErrorLines","slice","errorLine","afterErrorLines","join","logShaderSourceAndInfoLog","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","createProgram","linkProgram","program","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createStaticVertexBuffer","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createStaticIndexBuffer","ELEMENT_ARRAY_BUFFER","createTexture","validateTextureSize","width","height","maxTextureSize","requested","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","loc","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","d","nearestLargerEven","squeezeResult","squeezeShape","newShape","batchDim","cols","_a","isEven","n","isReshapeFree","shape1","shape2","arraysEqual","shape1Cols","shape2Cols","getWebGLMaxTextureSize","getParameter","getMaxTexturesInShader","MAX_TEXTURE_IMAGE_UNITS","min","getWebGLDisjointQueryTimerVersion","hasExtension","isWebGLVersionEnabled","e","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","texConfig","texImage2D","frameBuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","isWebGLFenceEnabled","fenceSync","viewport","scissor","ENV","registerFlag","get","device_util","isMobile","outputShape","shapes","this","variableNames","_","snippets","forEach","variable","push","operation","userCode","reduceInfo","op","firstPass","windowSize","batchSize","inSize","outSize","compOp","indexSnippet","getVecChannels","name","rank","getChannels","getGlslDifferences","version","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","index","strides","computeStrides","stride","getFlatIndexFrom3D","ENCODE_FLOAT_SNIPPET","getBroadcastDims","makeShader","inputsInfo","usesPackedTextures","prefixSnippets","x","shapeInfo","logicalShape","isUniform","outputSamplingSnippet","floatTextureSetOutputSnippet","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","res","getPackedSamplerFromInInfo","getSamplerFromInInfo","inShape","outShape","inputInfo","coordsSnippet","texName","texFuncSnippet","charAt","toUpperCase","funcName","inRank","outRank","broadcastDims","type","getCoordsDataType","rankDiff","fields","unpackedCoordsSnippet","s","isInputScalar","isOutputScalar","indexOf","getPackedSamplerAtOutputCoords","outTexShape","texShape","inTexShape","flatOffset","getSamplerAtOutputCoords","getInputSamplingSnippet","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","texelsInBatchN","batches","b","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","coordsFromIndexSnippet","shader_util.getLogicalCoordinatesFromFlatIndex","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","texNumR","texNumC","_b","tNumR","tNumC","offset","getFlatOffsetUniformName","getSamplerScalar","getUniformSampler","getSampler1D","texNumR_1","texNumC_1","keptDims","squeezedShape","newInputInfo","squeezeInputInfo","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","params","getPackedSamplerND","JSON","parse","stringify","assert","sourceLocSetup","sourceRank","dtype","sourceLocDType","channels","inChannel","intChannels","srcRCoords","concat","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","convInfo","filterHeight","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","avgMultiplier","outHeight","outWidth","filterDepth","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outDepth","xShape","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","backend_util","assertAndGetBroadcastShape","offsetSnippet","scaleSnippet","COMPLEX_MULTIPLY","aShape","bShape","ADD","SUB","MUL","PRELU","checkOutOfBounds","checkOutOfBoundsString","ClipProgram","gpgpu","webGLProgram","_this","minLoc","getUniformLocationNoThrow","maxLoc","uniform1f","ClipPackedProgram","computeOutShape","offsets","Array","shift","lastIndex","lastShift","axis","channel","lastChannels","allChannels","getValueSnippet","shift_1","shiftedChannels","channelIdx","c","idx","filterShape","isChannelsLast","dataFormat","inHeight","inWidth","rowDim","colDim","channelDim","outChannels","inDepth","channelMul","inChannels","addBias","activation","hasPreluActivationWeights","inputDepthNearestVec4","floor","inputDepthVec4Remainder","activationSnippet","applyActivationSnippet","addBiasSnippet","hasPreluActivation","xNumRows","xNumCols","texelsAcross","mainLoop","r","texelC","nextTexelOffset","imageShape","boxShape","cropSize","method","extrapolationValue","batch","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","_c","widthRatio","widthScale","inX","exclusive","reverse","finalDim","comparator","getFinalCoord","getCoords","DENSE","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","DepthToSpaceProgram","DOWNLOAD","inputIsUnsignedByte","shader_util.getFlatIndexFrom3D","row","col","COMPLEX_FFT","inputShape","inverse","innerDim","exponentMultiplierSnippet","PI","resultDenominator","value","FillProgram","valueLoc","indicesLength","sourceCoords","currentCoords","getSourceCoords","sliceDim","stridesType","strideString","webgl_util.createVertexShader","createVertexBuffer","webgl_util.createStaticVertexBuffer","Float32Array","createIndexBuffer","webgl_util.createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","createFloat32MatrixTexture","textureConfig","createFloat16MatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","createPackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","dataForUpload","texelDataType","Uint8Array","set","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","PIXEL_PACK_BUFFER","bufferSizeBytes","bytesPerFloat","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","downloadPackedMatrixFromBuffer","physicalRows","physicalCols","tex_util.getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA","glVersion","COLOR_BUFFER_FLOAT","textureFloatExtension","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","Object","GPGPUContext","disposed","warn","outputTexture","finish","deleteBuffer","throwIfDisposed","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","bindTextureToFrameBuffer","result","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","fenceContext","createFence","pollFence","query","isFencePassed","gl2_1","sync_1","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","gpgpu_util.downloadMatrixFromPackedOutputTexture","webgl_util.createFragmentShader","gpgpu_util.createVertexShader","webgl_util.createProgram","attachShader","webgl_util.linkProgram","webgl_util.validateProgram","vertexAttrsAreBound","setProgram","gpgpu_util.bindVertexProgramAttributeStreams","deleteProgram","useProgram","shouldThrow","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","outputMatrixTexture","setOutputMatrixTextureDriver","outputPackedMatrixTexture","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","webgl_util.validateFramebuffer","debugValidate","drawElements","TRIANGLES","UNSIGNED_SHORT","disjointQueryTimerExtension","getQueryTimerExtension","ext_1","getQueryTimerExtensionWebGL2","query_1","createQuery","TIME_ELAPSED_EXT","ext","getQueryTimerExtensionWebGL1","createQueryEXT","beginQueryEXT","endQueryEXT","ext_2","repeatedTry","getQueryTime","queryTimerVersion","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","arr","linearSearchLastTrue","itemsToPoll","isDoneFn","resolveFn","pollItems","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","y","validateBinaryAndProgram","shapeInfos","inputs","shapeA","input","shapeB","texShapeA","texShapeB","texData","itemsPerBlockRow","unrolled","radius","bias","beta","powOperator","rad","maxD","basis","depthRadius","transposeA","transposeB","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","numOutcomes","numSamples","MultinomialProgram","seed","seedLoc","numIndices","onValue","offValue","outOfBoundsCondition","dims","cond","getOutOfBoundsCondition","setup","innerDims","getSetup","coord","getSourceCoordsArr","getOutput","paddings","constantValue","p","start","end","unpackedCoords","source","cLimit","componentSetup","paddingArea","j","poolType","computePositions","flattenPositions","includeBatchInIndex","isAvgPool","batchFlattenPositionStr","flattenPositionStr","initializationValue","filterWidthNearestVec4","filterWidthVec4Remainder","updateSnippet","reduceType","compareOp","windowSizeNearestVec4","windowSizeVec4Remainder","vecType","thisRC","dy","alignCorners","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","newHeight","newWidth","oldHeight","oldWidth","effectiveInSize","effectiveOutSize","roundBase","inCoords","getInCoord","nextColumn","nextRow","getChannel","inCoordsArray","channels1","getR","getG","getB","getA","updateSize","indicesRank","updatesRank","summingDupeIndex","indicesString","indicesSnippet","updatesString","updatesSnippet","segOpInfo","segOpType","numSegments","checkValueOutOfBounds","checkSegmentIdOutOfBounds","cRank","cCoords","abCoords","cCoordVars","abCoordVars","destSize","body","uniformPart","SliceProgram","startLoc","uniform1iv","sourceLoc","upperRow","lowerRow","SlicePackedProgram","begin","inputDtype","newCoords","outputAxis_1","TextureManager","shapeRC","usage","newTexture","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","numFreeTextures","numUsedTextures","newTexture_1","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","logicalTexType","texList","texIndex","splice","logEnabled","total","tex","deleteMatrixTexture","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","reps","opSnippet","CHECK_NAN_SNIPPET","ABS","RELU","RELU6","ELU","SELU","SELU_SCALEALPHA","SELU_SCALE","NEG","CEIL","FLOOR","EXP","EXPM1","ERF","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","CLONE","segment_util","kernel_impls","tile","topkImpl","whereImpl","binaryCaches","mapActivationToShaderProgram","packed","unary_packed_op.RELU","unary_op.RELU","unary_packed_op.ELU","unary_op.ELU","unary_packed_op.RELU6","unary_op.RELU6","binaryop_packed_gpu.PRELU","binaryop_gpu.PRELU","_super","WeakMap","WeakSet","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","global","screen","window","devicePixelRatio","DataStorage","engine","tslib_1.__extends","MathBackendWebGL","numDataIds","cpuBackend","pendingDeletes","values","checkNumericalProblems","dataId","complexTensors","UnaryOpPackedProgram","unary_op.CLONE","UnaryOpProgram","runWebGLProgram","readSync","disposeData","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","now","realValues","real","dataSync","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","downloadWaitMs","pendingRead","has","subscribers_1","read","tmpDownloadTarget","decode","tmpData","createBufferFromTexture","tex_util.getDenseTexShape","createAndWaitForFence","all","ps","vals","dTypeVals","subscribers","delete","pendingDisposal","webgl_util.canBeRepresented","tmpTarget","tmpData_1","vals_1","downloadMatrixFromPackedTexture","subarray","shouldUsePackedProgram","webgl_util.getShapeAs3D","EncodeFloatPackedProgram","EncodeFloatProgram","f","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","filter","flattenedActiveTimerNames","uploadWaitMs","kernelMs","wallMs","kernelMs_1","sum","ms","unreliable","numBytesInGPU","startMs","endMs","waitForQueryAndGetTime","timerQuery","add","releaseGPUData","dispose","key","origDataId","refCount","dataRefCount","computeBytes","releaseTexture","uploadToGPU","findBackend","sizeThreshold","getCPUBackend","every","makeOutput","keep","clone","shouldExecuteOnCPU","tensor","isContinous","slice_util","isSliceContinous","customSetup","getCustomSetupFunc","compileAndRun","shallowSlice","xTexData","t","newTexData","assign","computeFlatOffset","stridedSlice","some","StridedSliceProgram","ReversePackedProgram","ReverseProgram","tensors","reals","imags","complex","midIndex","leftSide","rightSide","program_1","ConcatPackedProgram","tensors2D","as2D","ConcatProgram","reshape","neg","packedUnaryOp","unary_op.NEG","a","outerShapeA","outerShapeB","transpose","a3D","as3D","b3D","multiply","upcastType","MatMulPackedProgram","preluActivationWeights","hasBias","fusedActivation","aData","bData","realProgram","BinaryOpComplexProgram","binaryop_complex_gpu.COMPLEX_MULTIPLY","imagProgram","makeComplexComponentTensorInfo","real_1","imag_1","complex_1","packedBinaryOp","binaryop_gpu.MUL","BinaryOpProgram","mean","variance","scale","batchNormPackedProgram","BatchNormPackedProgram","batchNormProgram","BatchNormProgram","LRNPackedProgram","LRNProgram","inputImage","outputImage","LRNGradProgram","decodedData","decodeString","buf","TileProgram","PadPackedProgram","PadProgram","indices","gather","GatherProgram","blockShape","crops","prod","reduce","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","flattenShape","computeOptimalWindowSize","ReduceProgram","bestIndicesA","ArgMinMaxProgram","argReduce","ArgMinMaxPackedProgram","argReducePacked","axes","assertAxesAreInnerMostDims","reduceShape","a2D","outputDType","tf.sumOutType","segmentIds","permutation","getAxesPermutation","permutedX","getInnerMostAxes","segOpCompute","getUndoAxesPermutation","segOpComputeOptimalWindowSize","SegmentOpProgram","range","argMinMaxReduce","CumSumProgram","less","greater","condition","SelectProgram","condVals","k","sorted","xVals","minimum","BinaryOpPackedProgram","maximum","complexSeparableBinaryOp","binaryop_gpu.ADD","complexTensor","complexPart","addN","d1","d2","AddNPackedProgram","AddNProgram","binaryop_gpu.SUB","subtract","unary_op.CEIL","unary_op.FLOOR","exp","unary_op.EXP","expm1","unary_op.EXPM1","logits","dim","parseAxisParam","maxLogit","expandedShape","expandShapeToKeepDim","sumExp","div","rsqrt","unary_op.SELU","unary_op.ABS","xData","ComplexAbsProgram","unary_op.ERF","unary_op.STEP","sharedMatMulDim","outerShapeX","outerShapeFilter","batchMatMulWillBeUnpacked","reshapeWillBeExpensive","targetShape_1","xReshaped_1","filterReshaped_1","fusedBatchMatMul","targetShape","xReshaped","originalXTexDataShape","webgl_util.isReshapeFree","filterReshaped","pointwiseConv","pointwiseConvTexData","makeTensorFromDataId","numCols","x2ColShape","xSqueezed","squeeze","w2Row","im2ColProgram","Im2ColPackedProgram","im2Col","matmulProgram","product","conv2dByMatMul","conv2dWithIm2Row","Conv2DProgram","Conv2DDerInputProgram","Conv2DDerFilterProgram","shouldPackDepthwiseConv","DepthwiseConvPacked2DProgram","DepthwiseConv2DProgram","DepthwiseConv2DDerInputProgram","DepthwiseConv2DDerFilterProgram","Conv3DProgram","Conv3DDerInputProgram","Conv3DDerFilterProgram","Pool2DProgram","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","MaxPool2DBackpropProgram","avgPoolBackpropProgram","AvgPool2DBackpropProgram","castTensor","outIndex","fill","Pool3DProgram","avgPool3dBackpropProgram","AvgPool3DBackpropProgram","maxPool3dPositionsProgram","maxPool3dPositions","maxPool3dBackPropProgram","MaxPool3DBackpropProgram","info","packedReshape","reshapeTensor","ResizeBilinearPackedProgram","ResizeBilinearProgram","ResizeBilinearBackpropProgram","ResizeNearestNeighborProgram","ResizeNearestNeigborBackpropProgram","normalized","probs","softmax","OneHotProgram","DiagProgram","image","boxes","boxIndex","CropAndResizeProgram","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","sizeSplits","updates","sliceRank","numUpdates","outputSize","flattenIndices","flattenX","defaultValue","scalar","ScatterProgram","sparseIndices","sparseValues","fftImpl","FFTProgram","fft_gpu.COMPLEX_FFT","indicesShape","resultShape","numSlices","GatherNDProgram","inferDtype","getArrayFromDType","makeTensor","stop","linspaceImpl","write","UnpackProgram","PackProgram","afterShape","input3DShape","webgl_util.getBatchDim","webgl_util.getRowsCols","input3D","afterShapeAs3D","ReshapePackedProgram","DecodeMatrixPackedProgram","DecodeMatrixProgram","outputDtype","preventEagerUnpackingOfOutput","makeTensorInfo","outData","packedOutput","outPackingScheme","tex_util.PackingScheme","texelShape","outTexUsage","getTypedArrayFromDType","dataToDispose","inputsData","packedInputs","uniformValues","unpackTensor","packTensor","savedInput","outputData","keyInputs","hasOffset","keyUserCode","constructor","gpgpu_math.makeShaderKey","binary","getAndSaveBinary","inputInfos","inShapeInfos","shader_compiler.makeShader","infLoc","nanLoc","uniformLocations","varName","gpgpu_math.compileProgram","startTimer","outTex","setOutputPackedMatrixTexture","setOutputMatrixTexture","Infinity","NaN","varLoc","varOffsetLoc","uniform1fv","setInputMatrixTexture","executeProgram","gpgpu_math.runProgram","endTimer","unpacked","outInfo","getBinary","keys","HTMLCanvasElement","remove","floatPrecisionValue","tidy","debugFlag","underflowCheckValue","floatPrecision","webgl_util.getTextureShapeFromLogicalShape","isByteArray","EncodeMatrixPackedProgram","EncodeMatrixProgram","tempDenseInputHandle","getTexture","encodedOutputTarget","outputTexData","acquireTexture","float32Values","Int32Array","round","float32ToTypedArray","texType","warnedAboutMemory","mb","toFixed","bytesPerElement","KernelBackend","fromPixels2DContext","divConfig","kernelName","Div","backendName","kernelFunc","backend","divImpl","fromPixelsConfig","FromPixels","args","attrs","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","drawImage","tempPixelHandle","FromPixelsPackedProgram","FromPixelsProgram","nonMaxSuppressionV3","maxImplCPU","aVals","reduceSize","transposeImplCPU","perm","xRank","xSize","xStrides","newStrides","indexToLoc","newLoc","locToIndex","maxImpl","reshapedInput","reduced","reductionType","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","outputOrder","switchedOrder","getc","transposeImpl","TransposePackedProgram","TransposeProgram","maxConfig","Max","reductionIndices","webglBackend","permutedAxes","maxInputIsTransposed","maxInput","maxInputValues","out","maxOutShape","outValues","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","filterSize","dilations","eitherStridesOrDilationsAreOne","computePool2DInfo","poolOutput","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","gpuBackend","boxesVals","scoresVals","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","nonMaxSuppressionV5","kernelConfigs_1","NonMaxSuppressionV5","softNmsSigma","_d","Square","SquaredDifference","webGLBackend","Transpose","cpuTranspose","_i","kernelConfig","registerKernel","forceHalfFloat","isBrowser","registerBackend","webgl"],"mappings":"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"}