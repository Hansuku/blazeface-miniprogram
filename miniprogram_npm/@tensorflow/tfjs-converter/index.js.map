{"version":3,"file":"tf-converter.min.js","sources":["../src/data/compiled_api.ts","../src/operations/custom_op/register.ts","../src/operations/executors/utils.ts","../src/operations/op_list/arithmetic.ts","../src/operations/op_list/basic_math.ts","../src/operations/op_list/control.ts","../src/operations/op_list/convolution.ts","../src/operations/op_list/creation.ts","../src/operations/op_list/dynamic.ts","../src/operations/op_list/evaluation.ts","../src/operations/op_list/graph.ts","../src/operations/op_list/image.ts","../src/operations/op_list/logical.ts","../src/operations/op_list/matrices.ts","../src/operations/op_list/normalization.ts","../src/operations/op_list/reduction.ts","../src/operations/op_list/slice_join.ts","../src/operations/op_list/spectral.ts","../src/operations/op_list/transformation.ts","../src/operations/operation_mapper.ts","../src/operations/custom_op/node_value_impl.ts","../src/executor/tensor_utils.ts","../src/executor/tensor_array.ts","../src/operations/operation_executor.ts","../src/operations/executors/arithmetic_executor.ts","../src/operations/executors/basic_math_executor.ts","../src/operations/executors/control_executor.ts","../src/operations/executors/convolution_executor.ts","../src/operations/executors/creation_executor.ts","../src/operations/executors/dynamic_executor.ts","../src/operations/executors/evaluation_executor.ts","../src/operations/executors/image_executor.ts","../src/operations/executors/graph_executor.ts","../src/operations/executors/logical_executor.ts","../src/operations/executors/matrices_executor.ts","../src/operations/executors/normalization_executor.ts","../src/operations/executors/reduction_executor.ts","../src/operations/executors/slice_join_executor.ts","../src/operations/executors/spectral_executor.ts","../src/operations/executors/transformation_executor.ts","../src/executor/execution_context.ts","../src/executor/model_analysis.ts","../src/executor/graph_executor.ts","../src/executor/graph_model.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  'DT_INVALID' = 0,\n  'DT_FLOAT' = 1,\n  'DT_DOUBLE' = 2,\n  'DT_INT32' = 3,\n  'DT_UINT8' = 4,\n  'DT_INT16' = 5,\n  'DT_INT8' = 6,\n  'DT_STRING' = 7,\n  'DT_COMPLEX64' = 8,\n  'DT_INT64' = 9,\n  'DT_BOOL' = 10,\n  'DT_QINT8' = 11,\n  'DT_QUINT8' = 12,\n  'DT_QINT32' = 13,\n  'DT_BFLOAT16' = 14,\n  'DT_FLOAT_REF' = 101,\n  'DT_DOUBLE_REF' = 102,\n  'DT_INT32_REF' = 103,\n  'DT_UINT8_REF' = 104,\n  'DT_INT16_REF' = 105,\n  'DT_INT8_REF' = 106,\n  'DT_STRING_REF' = 107,\n  'DT_COMPLEX64_REF' = 108,\n  'DT_INT64_REF' = 109,\n  'DT_BOOL_REF' = 110,\n  'DT_QINT8_REF' = 111,\n  'DT_QUINT8_REF' = 112,\n  'DT_QINT32_REF' = 113,\n  'DT_BFLOAT16_REF' = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\n\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(name => getTensor(name, tensorMap, context));\n    }\n    const data = Array.prototype.slice.call(\n        getTensor(node.inputNames.slice(start)[0], tensorMap, context)\n            .dataSync());\n    return inputParam.type === 'number' ? data[0] : data;\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor based on input name by extracting the node name and\n * output index information.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor {\n  const [nodeName, index] = parseNodeName(name);\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const parts = name.split(':');\n  if (parts.length === 1) {\n    return [name, 0];\n  }\n\n  const nodeName = parts[0];\n  return [nodeName, Number(parts[parts.length - 1])];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'DivNoNan',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'clip_value_min', 'name': 'clipValueMin', 'type': 'number'},\n      {'tfName': 'clip_value_max', 'name': 'clipValueMax', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'real', 'type': 'tensor'},\n      {'start': 1, 'name': 'imag', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'alpha', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'clipValueMin',\n        'name': 'clipValueMin',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'clipValueMax',\n        'name': 'clipValueMax',\n        'type': 'number',\n        'defaultValue': 6\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'number'}]\n  },\n  {\n    'tfOpName': 'StatelessIf',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'If',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'StatelessWhile',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'While',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPoolWithArgmax',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'}, {\n        'tfName': 'include_batch_in_index',\n        'name': 'includeBatchInIndex',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'FusedDepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ],\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'logits', 'type': 'tensor'},\n      {'start': 1, 'name': 'numSamples', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'},\n      {'tfName': 'seed2', 'name': 'seed2', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV5',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'},\n      {'start': 5, 'name': 'softNmsSigma', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [{\n  'tfOpName': 'TopKV2',\n  'category': 'evaluation',\n  'inputs': [\n    {'start': 0, 'name': 'x', 'type': 'tensor'},\n    {'start': 1, 'name': 'k', 'type': 'number'},\n  ],\n  'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n}];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SelectV2',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': '_FusedMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'}, {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Cumsum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'exclusive', 'name': 'exclusive', 'type': 'bool'},\n      {'tfName': 'reverse', 'name': 'reverse', 'type': 'bool'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs':\n        [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs': [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'BroadcastTo',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': []\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {getRegisteredOp} from './custom_op/register';\n\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model from Tensorflow GraphDef to local representation for\n  // TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      }\n      if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {} as {[key: string]: Graph});\n    }\n\n    return {\n      nodes,\n      inputs,\n      outputs,\n      weights,\n      placeholders,\n      signature,\n      functions\n    };\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'func':\n                value = getFuncParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getFuncParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n\n  // map the TFunctionDef to TFJS graph object\n  private mapFunction(functionDef: tensorflow.IFunctionDef): Graph {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    let nodes: {[key: string]: Node} = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName, ] = getNodeNameAndIndex(arg.name);\n      const node: Node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {dtype: {value: parseDtypeParam(arg.type), type: 'dtype'}},\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    const returnNodeMap = functionDef.ret;\n\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n\n    const signature = this.mapArgsToSignature(functionDef);\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapArgsToSignature(functionDef: tensorflow.IFunctionDef):\n      tensorflow.ISignatureDef {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n      outputs: functionDef.signature.outputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n    };\n  }\n\n  private mapArgToTensorInfo(\n      arg: tensorflow.OpDef.IArgDef,\n      nameMap?: {[key: string]: string}): tensorflow.ITensorInfo {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {name, dtype: arg.type};\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getFuncParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: string): string {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function assertShapesMatchAllowUndefinedSize(\n    shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n  util.assert(\n      shapesEqualAllowUndefinedSize(shapeA, shapeB),\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\n\nexport function shapesEqualAllowUndefinedSize(n1: number[], n2: number[]) {\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private static nextId = 0;\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly id: number;\n  constructor(\n      public readonly name: string, public readonly dtype: DataType,\n      private maxSize: number, private elementShape: number[],\n      public readonly identicalElementShapes: boolean,\n      public readonly dynamicSize: boolean,\n      public readonly clearAfterRead: boolean) {\n    this.id = TensorArray.nextId++;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Close the current TensorArray.\n   */\n  clearAndClose() {\n    this.tensors.forEach(tensor => tensor.tensor.dispose());\n    this.tensors = [];\n    this.closed_ = true;\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t && t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t && t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = tensor.reshape([1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = slice(tensor, indices, sizes).reshape(this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tfc.tidy(\n                () => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tfc.tidy(\n                () => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tfc.tidy(\n                () => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tfc.tidy(\n                () => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tfc.tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tfc.tidy(\n                () => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tfc.tidy(\n                () => sliceJoin.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tfc.tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (value instanceof Promise) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BiasAdd':\n    case 'AddV2':\n    case 'Add': {\n      return [tfc.add(\n          (getParamValue('a', node, tensorMap, context) as tfc.Tensor),\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'AddN': {\n      return [tfc.addN((\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[]))];\n    }\n    case 'FloorMod':\n    case 'Mod':\n      return [tfc.mod(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'Mul':\n      return [tfc.mul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'RealDiv':\n    case 'Div': {\n      return [tfc.div(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'DivNoNan': {\n      return [tfc.divNoNan(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'FloorDiv': {\n      return [tfc.floorDiv(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sub': {\n      return [tfc.sub(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Minimum': {\n      return [tfc.minimum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Maximum': {\n      return [tfc.maximum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Pow': {\n      return [tfc.pow(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SquaredDifference': {\n      return [tfc.squaredDifference(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [tfc.abs(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acos':\n      return [tfc.acos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acosh':\n      return [tfc.acosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asin':\n      return [tfc.asin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asinh':\n      return [tfc.asinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan':\n      return [tfc.atan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan2':\n      return [tfc.atan2(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atanh':\n      return [tfc.atanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Ceil':\n      return [tfc.ceil(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Complex':\n      return [tfc.complex(\n          getParamValue('real', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('imag', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cos':\n      return [tfc.cos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cosh':\n      return [tfc.cosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Elu':\n      return [tfc.elu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Erf':\n      return [tfc.erf(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Exp':\n      return [tfc.exp(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Expm1': {\n      return [tfc.expm1(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Floor':\n      return [tfc.floor(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log':\n      return [tfc.log(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log1p': {\n      return [tfc.log1p(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Imag':\n      return [tfc.imag(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n\n    case 'Neg':\n      return [tfc.neg(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Reciprocal': {\n      return [tfc.reciprocal(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Real':\n      return [tfc.real(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu':\n      return [tfc.relu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Round': {\n      return [tfc.round(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Selu':\n      return [tfc.selu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sigmoid':\n      return [tfc.sigmoid(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sin':\n      return [tfc.sin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sign': {\n      return [tfc.sign(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sinh': {\n      return [tfc.sinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Softplus': {\n      return [tfc.softplus(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sqrt': {\n      return [tfc.sqrt(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Square': {\n      return [tfc.square(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tanh': {\n      return [tfc.tanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tan':\n      return [tfc.tan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu6':\n    case 'ClipByValue':\n      return [tfc.clipByValue(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('clipValueMin', node, tensorMap, context) as number,\n          getParamValue('clipValueMax', node, tensorMap, context) as number)];\n    case 'Rsqrt':\n      return [tfc.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'Prod':\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('axes', node, tensorMap, context) as number[])];\n    case 'LeakyRelu':\n      return [tfc.leakyRelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as number)];\n    case 'Prelu':\n      return [tfc.prelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as tfc.Tensor)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf': {\n      const thenFunc =\n          getParamValue('thenBranch', node, tensorMap, context) as string;\n      const elseFunc =\n          getParamValue('elseBranch', node, tensorMap, context) as string;\n      const cond =\n          getParamValue('cond', node, tensorMap, context) as tfc.Tensor;\n      const args =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      const condValue = await cond.data();\n      if (condValue[0]) {\n        return context.functionMap[thenFunc].executeFunctionAsync(args);\n      } else {\n        return context.functionMap[elseFunc].executeFunctionAsync(args);\n      }\n    }\n    case 'While':\n    case 'StatelessWhile': {\n      const bodyFunc =\n          getParamValue('body', node, tensorMap, context) as string;\n      const condFunc =\n          getParamValue('cond', node, tensorMap, context) as string;\n      const args =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      const condTensor =\n          (await context.functionMap[condFunc].executeFunctionAsync(args))[0];\n      let condValue = await condTensor.data();\n      let result: tfc.Tensor[] = args;\n      while (condValue[0]) {\n        result =\n            await context.functionMap[bodyFunc].executeFunctionAsync(result);\n        const condTensor =\n            (await context.functionMap[condFunc].executeFunctionAsync(\n                result))[0];\n        condValue = await condTensor.data();\n      }\n      return result;\n    }\n    case 'LoopCond':\n      return [\n        (getParamValue('pred', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'Switch': {\n      const pred =\n          getParamValue('pred', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor;\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data.clone()] :\n                                      [data.clone(), undefined];\n    }\n    case 'Merge':\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      return inputName ? [getTensor(inputName, tensorMap, context).clone()] :\n                         undefined;\n\n    case 'Enter':\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.enterFrame(frameId);\n      return [data.clone()];\n\n    case 'Exit':\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.exitFrame();\n      return [tensor.clone()];\n\n    case 'NextIteration':\n      const input =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.nextIteration();\n      return [input.clone()];\n\n    case 'TensorArrayV3':\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [scalar(tensorArray.id), scalar(1.0)];\n\n    case 'TensorArrayWriteV3':\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const writeTensorArray = context.getTensorArray(id);\n      writeTensorArray.write(index, writeTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayReadV3':\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId);\n      return [readTensorArray.read(readIndex)];\n\n    case 'TensorArrayGatherV3':\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n\n    case 'TensorArrayScatterV3':\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayConcatV3':\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const concatTensorArray = context.getTensorArray(concatId);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      return [concatTensorArray.concat(concatDtype)];\n\n    case 'TensorArraySplitV3':\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId);\n      splitTensorArray.split(lengths, splitTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArraySizeV3':\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const sizeTensorArray = context.getTensorArray(sizeId);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n\n    case 'TensorArrayCloseV3':\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const closeTensorArray = context.getTensorArray(closeId);\n      closeTensorArray.clearAndClose();\n      return [scalar(0)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Conv1D': {\n      const stride =\n          getParamValue('stride', node, tensorMap, context) as number;\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilation =\n          getParamValue('dilation', node, tensorMap, context) as number;\n      return [tfc.conv1d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor3D,\n          stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n          dilation)];\n    }\n    case 'Conv2D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      return [tfc.conv2d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          [stride[1], stride[2]], pad as 'valid' | 'same',\n          dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n    }\n    case '_FusedConv2D':\n    case 'FusedDepthwiseConv2dNative': {\n      const [extraOp, activationFunc] =\n          (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n      const isBiasAdd = extraOp === 'biasadd';\n      const isPrelu = activationFunc === 'prelu';\n      const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n      const numArgs =\n          (getParamValue('numArgs', node, tensorMap, context) as number);\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error(\n              'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n              'must have two extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error(\n              'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n              'one extra argument: bias.');\n        }\n      }\n      if (isBatchNorm) {\n        throw new Error(\n            'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');\n      }\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      const [biasArg, preluArg] =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      const kernelMethod = node.op === '_FusedConv2D' ?\n          tfc.fused.conv2d :\n          tfc.fused.depthwiseConv2d;\n      return [kernelMethod({\n        x: getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n            tfc.Tensor4D,\n        filter: getParamValue('filter', node, tensorMap, context) as\n            tfc.Tensor4D,\n        strides: [stride[1], stride[2]],\n        pad: pad as 'valid' | 'same',\n        dataFormat: dataFormat as 'NHWC' | 'NCHW',\n        dilations: [dilations[1], dilations[2]],\n        bias: biasArg,\n        activation: activationFunc as tfc.fused.Activation,\n        preluActivationWeights: preluArg\n      })];\n    }\n    case 'Conv2DBackpropInput':\n    case 'Conv2dTranspose': {\n      const shape = getParamValue(\n                        'outputShape', node, tensorMap,\n                        context) as [number, number, number] |\n          [number, number, number, number];\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      return [tfc.conv2dTranspose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n    }\n    case 'DepthwiseConv2dNative':\n    case 'DepthwiseConv2d': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n\n      return [tfc.depthwiseConv2d(\n          getParamValue('input', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          [stride[1], stride[2]], pad as 'valid' | 'same',\n          dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n    }\n    case 'Conv3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      return [tfc.conv3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D |\n              tfc.Tensor<tfc.Rank.R5>,\n          getParamValue('filter', node, tensorMap, context) as\n              tfc.Tensor<tfc.Rank.R5>,\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n          dataFormat as 'NDHWC' | 'NCDHW',\n          [dilations[1], dilations[2], dilations[3]])];\n    }\n    case 'AvgPool': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.avgPool(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n          pad as 'valid' | 'same')];\n    }\n    case 'MaxPool': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.maxPool(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n          pad as 'valid' | 'same')];\n    }\n    case 'MaxPoolWithArgmax': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n      const includeBatchInIndex =\n          getParamValue('includeBatchInIndex', node, tensorMap, context) as\n          boolean;\n      const {result, indexes} = tfc.maxPoolWithArgmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n          [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n          pad as 'valid' | 'same', includeBatchInIndex);\n      return [result, indexes];\n    }\n    case 'AvgPool3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.avgPool3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n          [kernelSize[1], kernelSize[2], kernelSize[3]],\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n    }\n\n    case 'MaxPool3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.maxPool3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n          [kernelSize[1], kernelSize[2], kernelSize[3]],\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n    }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Fill': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const value = getParamValue('value', node, tensorMap, context) as number;\n      return [tfc.fill(shape, value, dtype)];\n    }\n    case 'LinSpace': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const num = getParamValue('num', node, tensorMap, context) as number;\n      return [tfc.linspace(start, stop, num)];\n    }\n    case 'Multinomial': {\n      const logits =\n          getParamValue('logits', node, tensorMap, context) as tfc.Tensor1D;\n      const numSamples =\n          getParamValue('numSamples', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.multinomial(logits, numSamples, seed)];\n    }\n    case 'OneHot': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      const depth = getParamValue('depth', node, tensorMap, context) as number;\n      const onValue =\n          getParamValue('onValue', node, tensorMap, context) as number;\n      const offValue =\n          getParamValue('offValue', node, tensorMap, context) as number;\n      return [tfc.oneHot(indices, depth, onValue, offValue)];\n    }\n    case 'Ones': {\n      return [tfc.ones(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'OnesLike': {\n      return [tfc.onesLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'RandomUniform': {\n      return [tfc.randomUniform(\n          // tslint:disable-next-line:no-any\n          getParamValue('shape', node, tensorMap, context) as any,\n          getParamValue('minval', node, tensorMap, context) as number,\n          getParamValue('maxval', node, tensorMap, context) as number,\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'Range': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const step = getParamValue('step', node, tensorMap, context) as number;\n      return [tfc.range(\n          start, stop, step,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32')];\n    }\n    case 'TruncatedNormal': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const mean = getParamValue('mean', node, tensorMap, context) as number;\n      const stdDev =\n          getParamValue('stdDev', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.truncatedNormal(\n          shape, mean, stdDev,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32',\n          seed)];\n    }\n    case 'Zeros': {\n      return [tfc.zeros(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'ZerosLike': {\n      return [tfc.zerosLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5':\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const scores =\n          getParamValue('scores', node, tensorMap, context) as tfc.Tensor;\n      const maxOutputSize =\n          getParamValue('maxOutputSize', node, tensorMap, context) as number;\n      const iouThreshold =\n          getParamValue('iouThreshold', node, tensorMap, context) as number;\n      const scoreThreshold =\n          getParamValue('scoreThreshold', node, tensorMap, context) as number;\n\n      if (node.op === 'NonMaxSuppressionV5') {\n        const softNmsSigma =\n            getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n        const result = await tfc.image.nonMaxSuppressionWithScoreAsync(\n            boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n            iouThreshold, scoreThreshold, softNmsSigma);\n\n        return [result.selectedIndices, result.selectedScores];\n      }\n\n      return [await tfc.image.nonMaxSuppressionAsync(\n          boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n          iouThreshold, scoreThreshold)];\n    }\n    case 'Where': {\n      const condition =\n          (getParamValue('condition', node, tensorMap, context) as tfc.Tensor)\n              .asType('bool');\n      const result = [await tfc.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return tfc.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'TopKV2': {\n          const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n          const k = getParamValue('k', node, tensorMap, context) as number;\n          const sorted =\n              getParamValue('sorted', node, tensorMap, context) as boolean;\n          const result = tfc.topk(x, k, sorted);\n          return [result.values, result.indices];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ResizeBilinear': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeBilinear(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'ResizeNearestNeighbor': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeNearestNeighbor(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'CropAndResize': {\n      const image =\n          getParamValue('image', node, tensorMap, context) as tfc.Tensor;\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const boxInd =\n          getParamValue('boxInd', node, tensorMap, context) as tfc.Tensor;\n      const cropSize =\n          getParamValue('cropSize', node, tensorMap, context) as number[];\n      const method =\n          getParamValue('method', node, tensorMap, context) as string;\n      const extrapolationValue =\n          getParamValue('extrapolationValue', node, tensorMap, context) as\n          number;\n      return [tfc.image.cropAndResize(\n          image as tfc.Tensor4D, boxes as tfc.Tensor2D, boxInd as tfc.Tensor1D,\n          cropSize as [number, number], method as 'bilinear' | 'nearest',\n          extrapolationValue)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Const': {\n      return tensorMap[node.name];\n    }\n    case 'PlaceholderWithDefault':\n      const def =\n          getParamValue('default', node, tensorMap, context) as tfc.Tensor;\n      return [getTensor(node.name, tensorMap, context) || def];\n    case 'Placeholder':\n      return [getTensor(node.name, tensorMap, context)];\n    case 'Identity':\n    case 'StopGradient':\n    case 'FakeQuantWithMinMaxVars':  // This op is currently ignored.\n      return [\n        (getParamValue('x', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'IdentityN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => t.clone());\n    case 'Snapshot':\n      const snapshot =\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor);\n      return [snapshot.clone()];\n    case 'Shape':\n      return [tfc.tensor1d(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).shape,\n          'int32')];\n    case 'ShapeN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => tfc.tensor1d(t.shape));\n    case 'Size':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).size,\n          'int32')];\n    case 'Rank':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).rank,\n          'int32')];\n    case 'NoOp':\n      return [tfc.scalar(1)];\n    case 'Print':\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor[];\n      const message =\n          getParamValue('message', node, tensorMap, context) as string;\n      const summarize =\n          getParamValue('summarize', node, tensorMap, context) as number;\n      console.warn(\n          'The graph has a tf.print() operation,' +\n          'usually used for debugging, which slows down performance.');\n      console.log(message);\n      for (let i = 0; i < data.length; i++) {\n        console.log(\n            Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));\n      }\n      return [input];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Equal': {\n      return [tfc.equal(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'NotEqual': {\n      return [tfc.notEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Greater': {\n      return [tfc.greater(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'GreaterEqual': {\n      return [tfc.greaterEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Less': {\n      return [tfc.less(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LessEqual': {\n      return [tfc.lessEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalAnd': {\n      return [tfc.logicalAnd(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalNot': {\n      return [tfc.logicalNot(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalOr': {\n      return [tfc.logicalOr(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Select':\n    case 'SelectV2': {\n      return [tfc.where(\n          getParamValue('condition', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BatchMatMul':\n    case 'BatchMatMulV2':\n    case 'MatMul':\n      return [tfc.matMul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('transposeA', node, tensorMap, context) as boolean,\n          getParamValue('transposeB', node, tensorMap, context) as boolean)];\n\n    case 'Transpose':\n      return [tfc.transpose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('perm', node, tensorMap, context) as number[])];\n\n    case '_FusedMatMul':\n      const [extraOp, activationFunc] =\n          (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n      const isBiasAdd = extraOp === 'biasadd';\n      const isPrelu = activationFunc === 'prelu';\n\n      const numArgs =\n          (getParamValue('numArgs', node, tensorMap, context) as number);\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error(\n              'Fused MatMul with BiasAdd and Prelu must have two ' +\n              'extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error(\n              'Fused MatMul with BiasAdd must have one extra argument: bias.');\n        }\n      }\n      const [biasArg, preluArg] =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      return [tfc.fused.matMul({\n        a: getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n        b: getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n        transposeA: getParamValue('transposeA', node, tensorMap, context) as\n            boolean,\n        transposeB: getParamValue('transposeB', node, tensorMap, context) as\n            boolean,\n        bias: biasArg,\n        activation: activationFunc as tfc.fused.Activation,\n        preluActivationWeights: preluArg\n      })];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'FusedBatchNorm':\n    case 'FusedBatchNormV2': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'FusedBatchNormV3': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'LRN': {\n      return [tfc.localResponseNormalization(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('radius', node, tensorMap, context) as number,\n          getParamValue('bias', node, tensorMap, context) as number,\n          getParamValue('alpha', node, tensorMap, context) as number,\n          getParamValue('beta', node, tensorMap, context) as number)];\n    }\n    case 'Softmax': {\n      return [tfc.softmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogSoftmax': {\n      return [tfc.logSoftmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SparseToDense': {\n      return [tfc.sparseToDense(\n          getParamValue('sparseIndices', node, tensorMap, context) as\n              tfc.Tensor,\n          getParamValue('outputShape', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('sparseValues', node, tensorMap, context) as number[],\n          getParamValue('defaultValue', node, tensorMap, context) as\n              tfc.Scalar)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Max': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.max(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Mean': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.mean(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Min': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.min(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Sum': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.sum(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'All': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.all(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Any': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.any(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'ArgMax': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'ArgMin': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Prod': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Cumsum': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const exclusive =\n          getParamValue('exclusive', node, tensorMap, context) as boolean;\n      const reverse =\n          getParamValue('reverse', node, tensorMap, context) as boolean;\n      return [tfc.cumsum(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          exclusive, reverse)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat': {\n      const n = getParamValue('n', node, tensorMap, context) as number;\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      let inputs =\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n      inputs = inputs.slice(0, n);\n      return [tfc.concat(inputs, axis)];\n    }\n    case 'GatherV2':\n    case 'Gather': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      return [tfc.gather(input, indices.asType('int32'), axis)];\n    }\n    case 'ReverseV2':\n    case 'Reverse': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.reverse(input, axis)];\n    }\n    case 'Slice': {\n      // tslint:disable-next-line:no-any\n      const begin = getParamValue('begin', node, tensorMap, context) as any;\n      // tslint:disable-next-line:no-any\n      const size = getParamValue('size', node, tensorMap, context) as any;\n      return [tfc.slice(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, begin,\n          size)];\n    }\n    case 'StridedSlice': {\n      const begin =\n          getParamValue('begin', node, tensorMap, context) as number[];\n      const end = getParamValue('end', node, tensorMap, context) as number[];\n      const strides =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const beginMask =\n          getParamValue('beginMask', node, tensorMap, context) as number;\n      const endMask =\n          getParamValue('endMask', node, tensorMap, context) as number;\n      const ellipsisMask =\n          getParamValue('ellipsisMask', node, tensorMap, context) as number;\n      const newAxisMask =\n          getParamValue('newAxisMask', node, tensorMap, context) as number;\n      const shrinkAxisMask =\n          getParamValue('shrinkAxisMask', node, tensorMap, context) as number;\n      const tensor = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      if (begin.length === 1 && tensor.shape.length > 1) {\n        for (let i = 1; i < tensor.shape.length; i++) {\n          begin.push(0);\n          end.push(tensor.shape[i]);\n          strides.push(strides[0]);\n        }\n      }\n      return [tfc.stridedSlice(\n          tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask)];\n    }\n    case 'Pack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensors =\n            getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n        // Reshape the tensors to the first tensor's shape if they don't match.\n        const shape = tensors[0].shape;\n        const squeezedShape = tensors[0].squeeze().shape;\n        const mapped = tensors.map(tensor => {\n          const sameShape = tfc.util.arraysEqual(tensor.shape, shape);\n          if (!sameShape &&\n              !tfc.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) {\n            throw new Error('the input tensors shape does not match');\n          }\n          return sameShape ? tensor : tensor.reshape(shape);\n        });\n        return [tfc.stack(mapped, axis)];\n      });\n    }\n    case 'Unpack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensor =\n            getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n        return tfc.unstack(tensor, axis);\n      });\n    }\n    case 'Tile': {\n      const reps = getParamValue('reps', node, tensorMap, context) as number[];\n      return [tfc.tile(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, reps)];\n    }\n    case 'Split':\n    case 'SplitV': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const numOrSizeSplits =\n          getParamValue('numOrSizeSplits', node, tensorMap, context) as number |\n          number[];\n      return tfc.split(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          numOrSizeSplits, axis);\n    }\n    case 'ScatterNd': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as tfc.Tensor;\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      return [tfc.scatterND(indices, values, shape)];\n    }\n    case 'GatherNd': {\n      const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.gatherND(x, indices)];\n    }\n    case 'SparseToDense': {\n      const indices =\n          getParamValue('sparseIndices', node, tensorMap, context) as\n          tfc.Tensor;\n      const shape =\n          getParamValue('outputShape', node, tensorMap, context) as number[];\n      const sparseValues =\n          getParamValue('sparseValues', node, tensorMap, context) as tfc.Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as tfc.Scalar;\n      return [tfc.sparseToDense(\n          indices, sparseValues, shape,\n          sparseValues.dtype === defaultValue.dtype ?\n              defaultValue :\n              defaultValue.asType(sparseValues.dtype))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'FFT': {\n          return [tfc.fft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IFFT': {\n          return [tfc.ifft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'RFFT': {\n          return [tfc.rfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IRFFT': {\n          return [tfc.irfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, split} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Cast': {\n      return [tfc.cast(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('dtype', node, tensorMap, context) as 'int32' |\n              'float32' | 'bool')];\n    }\n    case 'ExpandDims': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.expandDims(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Squeeze': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      return [tfc.squeeze(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n\n    case 'Reshape': {\n      return [tfc.reshape(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('shape', node, tensorMap, context) as number[])];\n    }\n    case 'PadV2':\n    case 'Pad': {\n      return [tfc.pad(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          split(\n              getParamValue('padding', node, tensorMap, context) as number[],\n              2) as Array<[number, number]>,\n          getParamValue('constantValue', node, tensorMap, context) as number)];\n    }\n    case 'SpaceToBatchND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const paddings = split(\n          getParamValue('paddings', node, tensorMap, context) as number[], 2);\n      return [tfc.spaceToBatchND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, paddings)];\n    }\n    case 'BatchToSpaceND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const crops = split(\n          getParamValue('crops', node, tensorMap, context) as number[], 2);\n      return [tfc.batchToSpaceND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, crops)];\n    }\n    case 'DepthToSpace': {\n      const blockSize =\n          getParamValue('blockSize', node, tensorMap, context) as number;\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as\n           string).toUpperCase() as 'NHWC' |\n          'NCHW';\n      return [tfc.depthToSpace(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n          blockSize, dataFormat)];\n    }\n    case 'BroadcastTo': {\n      return [tfc.broadcastTo(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('shape', node, tensorMap, context) as number[])];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\nimport {FunctionExecutor} from './types';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      public readonly weightMap: NamedTensorsMap,\n      public readonly tensorArrayMap: TensorArrayMap,\n      public readonly functionMap: {[key: string]: FunctionExecutor} = {}) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[],\n    weightMap: NamedTensorsMap): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = [\n  'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n  'StatelessWhile'\n];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\nimport {FunctionExecutor} from './types';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor implements FunctionExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private _weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private SEPERATOR = ',';\n  private _functions: {[key: string]: Graph} = {};\n  private _functionExecutorMap: {[key: string]: FunctionExecutor} = {};\n\n  get weightIds(): number[] {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap(): {[key: string]: FunctionExecutor} {\n    return this.parent ? this.parent.functionExecutorMap :\n                         this._functionExecutorMap;\n  }\n\n  get weightMap(): NamedTensorsMap {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map((node) => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n    });\n  }\n\n  get functions(): {[key: string]: ISignatureDef} {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {} as {[key: string]: ISignatureDef});\n  }\n\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(private graph: Graph, private parent?: GraphExecutor) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] =\n            new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  execute(inputs: NamedTensorMap, outputs: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodes =\n        outputs.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n    const tensorArrayMap: TensorArrayMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(\n          this.weightMap, tensorArrayMap, this.functionExecutorMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors = executeOp(node, tensorsMap, context) as Tensor[];\n          if (tensors instanceof Promise) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep, outputs,\n              intermediateTensorConsumerCount);\n        }\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   * @param disableWarning disable the no dynamic ops warning message, default\n   * to false\n   */\n  async executeAsync(\n      inputs: NamedTensorMap, outputs: string[],\n      disableWarning = false): Promise<Tensor[]> {\n    inputs = this.mapInputs(inputs);\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const tensorArrayMap: TensorArrayMap = {};\n    const context = new ExecutionContext(\n        this.weightMap, tensorArrayMap, this.functionExecutorMap);\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap = await this.executeWithControlFlow(\n        inputs, context, outputs, disableWarning);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = new Set<number>(results.map(t => t.id));\n    const inputIds =\n        new Set<number>(Object.keys(inputs).map(name => inputs[name].id));\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.isDisposed && !outputIds.has(tensor.id) &&\n            !inputIds.has(tensor.id) &&\n            this.weightIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n    });\n    return results;\n  }\n\n  async executeFunctionAsync(inputs: Tensor[]): Promise<Tensor[]> {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {} as NamedTensorMap);\n\n    return this.executeAsync(mappedInputs, this.outputNodes, true);\n  }\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param disableWarning disable no async op warning\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext, outputNames: string[],\n      disableWarning: boolean): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodes =\n        outputNames.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(inputs, outputNodes, this.weightMap);\n\n    const stack: NodeWithContexts[] =\n        [...inputNodes, ...this.graph.weights].map(node => {\n          return {node, contexts: context.currentContext};\n        });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !disableWarning) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not provided as input nodes.\n      if (inputNodes.indexOf(item.node) === -1) {\n        const tensors = executeOp(item.node, tensorMap, context);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (tensors instanceof Promise) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  private artifacts: io.ModelArtifacts;\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers = io.getLoadHandlers(path as string, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n\n    return this.loadSync(artifacts);\n  }\n\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true} */\n  loadSync(artifacts:io.ModelArtifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n    let signature = {};\n    if (this.artifacts.userDefinedMetadata != null) {\n      signature =  // tslint:disable-next-line:no-any\n          (this.artifacts.userDefinedMetadata as any).signature as\n          tensorflow.ISignatureDef;\n    }\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  dispose() {\n    this.executor.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n */\n/** @doc {heading: 'Models', subheading: 'Loading'} */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.0.1';\nexport {version};\n"],"names":["DataType","SaverDef","CheckpointFormatVersion","CUSTOM_OPS","getRegisteredOp","name","getParamValue","paramName","node","tensorMap","context","inputParam","inputParams","undefined","inputIndexStart","start","end","inputIndexEnd","type","getTensor","inputNames","slice","map","data","Array","prototype","call","dataSync","attrParam","attrParams","value","tensorsMap","_a","nodeName","index","contextId","currentContextIds","find","getNodeNameWithContextId","getNodeNameAndIndex","inputName","currentContextId","parseNodeName","parts","split","length","Number","arr","size","res","i","push","tfOpName","category","inputs","attrs","tfName","notSupported","defaultValue","tfDeprecatedName","ops","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","logical","image","graph","matrices","normalization","reduction","sliceJoin","spectral","transformation","mappersJson","concat","op","json","this","opMappers","reduce","mapper","Object","OperationMapper","_instance","signature","tfNodes","placeholders","weights","nodes","_this","mapNode","startsWith","outputs","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","keys","forEach","key","children","signatureKey","functions","library","function","func","mapFunction","entries","prev","curr","attr","newNode","input","substr","rawAttrs","param","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","getFuncParam","Error","functionDef","nodeDef","inputArg","arg","dtype","parseDtypeParam","returnNodeMap","ret","outputArg","output","defaultOutput","mapArgsToSignature","methodName","mapArgToTensorInfo","nameMap","parseStringParam","s","keepCase","isArray","String","fromCharCode","apply","text","global","env","atob","Buffer","toString","decodeBase64","toLowerCase","def","b","parseInt","tensorflow.DataType","DT_FLOAT","DT_INT32","DT_INT64","DT_INT8","DT_UINT8","DT_BOOL","DT_DOUBLE","DT_STRING","list","v","parseTensorShapeParam","shape","unknownRank","dim","f","getInput","getAttr","NodeValueImpl","tensor","assertShapesMatchAllowUndefinedSize","shapeA","shapeB","errorMessagePrefix","util","assert","n1","n2","shapesEqualAllowUndefinedSize","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","id","TensorArray","nextId","closed_","tensors","dispose","tensorWithState","cleared","read","indices","t","written","write","readMany","stack","maxIndex","Math","max","writeMany","unstack","totalLength","cumulativeLengths","len","elementPerRow","tidy","reshape","indices_1","sizes","executeOp","tfc.tidy","tfc.add","tfc.addN","tfc.mod","tfc.mul","tfc.div","tfc.divNoNan","tfc.floorDiv","tfc.sub","tfc.minimum","tfc.maximum","tfc.pow","tfc.squaredDifference","TypeError","arithmetic.executeOp","tfc.abs","tfc.acos","tfc.acosh","tfc.asin","tfc.asinh","tfc.atan","tfc.atan2","tfc.atanh","tfc.ceil","tfc.complex","tfc.cos","tfc.cosh","tfc.elu","tfc.erf","tfc.exp","tfc.expm1","tfc.floor","tfc.log","tfc.log1p","tfc.imag","tfc.neg","tfc.reciprocal","tfc.real","tfc.relu","tfc.round","tfc.selu","tfc.sigmoid","tfc.sin","tfc.sign","tfc.sinh","tfc.softplus","tfc.sqrt","tfc.square","tfc.tanh","tfc.tan","tfc.clipByValue","tfc.rsqrt","tfc.prod","tfc.leakyRelu","tfc.prelu","basicMath.executeOp","thenFunc","elseFunc","cond","args","condValue","_b","functionMap","executeFunctionAsync","bodyFunc","condFunc","result","clone","pred","data_1","frameId","enterFrame","exitFrame","nextIteration","name_1","tensorArray","addTensorArray","scalar","writeTensor","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","gather","scatterId","scatterIndices","scatterTensor","scatter","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","sizeId","sizeTensorArray","closeId","clearAndClose","control.executeOp","stride","pad","dataFormat","toUpperCase","dilation","tfc.conv1d","dilations","tfc.conv2d","extraOp","activationFunc","isBiasAdd","isPrelu","isBatchNorm","numArgs","biasArg","preluArg","tfc.fused","conv2d","depthwiseConv2d","x","filter","strides","bias","activation","preluActivationWeights","tfc.conv2dTranspose","tfc.depthwiseConv2d","tfc.conv3d","kernelSize","tfc.avgPool","tfc.maxPool","includeBatchInIndex","_c","tfc.avgPool3d","tfc.maxPool3d","convolution.executeOp","tfc.fill","stop_1","num","tfc.linspace","logits","numSamples","seed","tfc.multinomial","depth","onValue","offValue","tfc.oneHot","tfc.ones","tfc.onesLike","tfc.randomUniform","stop_2","step","tfc.range","mean","stdDev","tfc.truncatedNormal","tfc.zeros","tfc.zerosLike","creation.executeOp","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","tfc.image","nonMaxSuppressionWithScoreAsync","selectedIndices","selectedScores","nonMaxSuppressionAsync","condition","asType","tfc.whereAsync","tfc.setdiff1dAsync","dynamic.executeOp","k","sorted","tfc.topk","values","evaluation.executeOp","images","alignCorners","resizeBilinear","resizeNearestNeighbor","boxInd","cropSize","method","extrapolationValue","cropAndResize","image.executeOp","tfc.tensor1d","tfc.scalar","rank","message","summarize","console","warn","log","graph.executeOp","tfc.equal","tfc.notEqual","tfc.greater","tfc.greaterEqual","tfc.less","tfc.lessEqual","tfc.logicalAnd","tfc.logicalNot","tfc.logicalOr","tfc.where","logical.executeOp","tfc.matMul","tfc.transpose","matMul","a","transposeA","transposeB","matrices.executeOp","tfc.batchNorm","tfc.localResponseNormalization","tfc.softmax","tfc.logSoftmax","tfc.sparseToDense","normalization.executeOp","axis","keepDims","tfc.max","tfc.mean","tfc.min","tfc.sum","tfc.all","tfc.any","tfc.argMax","tfc.argMin","exclusive","reverse","tfc.cumsum","reduction.executeOp","n","tfc.concat","tfc.gather","tfc.reverse","begin","tfc.slice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","tfc.stridedSlice","squeezedShape","squeeze","mapped","sameShape","tfc.util","arraysEqual","tfc.stack","tfc.unstack","reps","tfc.tile","numOrSizeSplits","tfc.split","tfc.scatterND","tfc.gatherND","sparseValues","sliceJoin.executeOp","tfc.fft","tfc.ifft","tfc.rfft","tfc.irfft","spectral.executeOp","tfc.cast","tfc.expandDims","tfc.squeeze","tfc.reshape","tfc.pad","blockShape","paddings","tfc.spaceToBatchND","crops","tfc.batchToSpaceND","blockSize","tfc.depthToSpace","tfc.broadcastTo","transformation.executeOp","opMapper","customExecutor","Promise","then","weightMap","tensorArrayMap","frameName","iterationId","rootContext","generateCurrentContextIds","ExecutionContext","contexts","_currentContextIds","names","contextIdforContexts","join","lastId","newFrame","unshift","splice","shift","assign","getExecutionSubgraph","usedNodes","Set","missingInputs","dynamicNode","syncInputs","seen","inputNodeNames","frontier","pop","isControlFlow","isDynamicShape","child","has","add","indexOf","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","parent","Map","_outputs","_inputs","_signature","_functions","_functionExecutorMap","GraphExecutor","weightIds","_weightIds","functionExecutorMap","_weightMap","sortedInputs","sort","sortedOutputs","SEPERATOR","executionInfo","outNames","inNames","weight","orderedNodes","every","getNodesInTopologicalOrder","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","inputNodes","outputNodes","compilationKey","getCompilationKey","compiledMap","get","compile","set","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","checkTensorForDisposal","ids","outputNames","getTensorsForCurrentContenxt","count","disableWarning","executeWithControlFlow","results","outputIds","inputIds","isDisposed","mappedInputs","executeAsync","currentContext","added","promises","processStack","all","missingOutputs","alternativeMsg","item","currentContext_1","processChildNodes","this_1","childNode","some","shape_1","match","notInGraph","normalizedName","modelUrl","loadOptions","GraphModel","version","executor","path","load","handler","requestInit","io","browserHTTPRequest","handlers","getLoadHandlers","findIOHandler","artifacts","loadSync","modelTopology","userDefinedMetadata","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","Instance","transformGraph","convertTensorMapToTensorsMap","handlerOrURL","config","getSaveHandlers","save","execute","Tensor","normalizeInputs","normalizeOutputs","newMap","options","fromTFHub","endsWith","model","opFunc"],"mappings":"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"}